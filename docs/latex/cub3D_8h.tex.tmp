\hypertarget{cub3D_8h}{}\doxysection{/home/ssergiu/projects/cub3d/include/cub3D.h File Reference}
\label{cub3D_8h}\index{/home/ssergiu/projects/cub3d/include/cub3D.h@{/home/ssergiu/projects/cub3d/include/cub3D.h}}
{\ttfamily \#include $<$stdio.\+h$>$}\newline
{\ttfamily \#include $<$assert.\+h$>$}\newline
{\ttfamily \#include $<$errno.\+h$>$}\newline
{\ttfamily \#include $<$fcntl.\+h$>$}\newline
{\ttfamily \#include $<$string.\+h$>$}\newline
{\ttfamily \#include \char`\"{}libft/libft.\+h\char`\"{}}\newline
{\ttfamily \#include \char`\"{}../external/\+MLX42/include/\+MLX42/\+MLX42.\+h\char`\"{}}\newline
Include dependency graph for cub3\+D.\+h\+:
% FIG 0
This graph shows which files directly or indirectly include this file\+:
% FIG 1
\doxysubsection*{Classes}
\begin{DoxyCompactItemize}
\item 
struct \mbox{\hyperlink{structs__position}{s\+\_\+position}}
\item 
struct \mbox{\hyperlink{structs__static__position}{s\+\_\+static\+\_\+position}}
\item 
struct \mbox{\hyperlink{structs__player__data}{s\+\_\+player\+\_\+data}}
\item 
struct \mbox{\hyperlink{structs__game__data}{s\+\_\+game\+\_\+data}}
\item 
struct \mbox{\hyperlink{structs__map__data}{s\+\_\+map\+\_\+data}}
\end{DoxyCompactItemize}
\doxysubsection*{Macros}
\begin{DoxyCompactItemize}
\item 
\#define \mbox{\hyperlink{cub3D_8h_aa8cecfc5c5c054d2875c03e77b7be15d}{TRUE}}~1
\item 
\#define \mbox{\hyperlink{cub3D_8h_aa93f0eb578d23995850d61f7d61c55c1}{FALSE}}~0
\item 
\#define \mbox{\hyperlink{cub3D_8h_a2706e5298e357ffb64b22c7e7fc1b3e9}{TILE}}~64
\item 
\#define \mbox{\hyperlink{cub3D_8h_a4635f2163efe937e76598aff306d35d1}{EMPTY\+\_\+\+MAP}}~254
\item 
\#define \mbox{\hyperlink{cub3D_8h_ae9c7e3e493aaf9541c7dc341111be1f9}{IS\+\_\+\+DIRECTORY}}~21
\item 
\#define \mbox{\hyperlink{cub3D_8h_a8e0ad1ba0b05ba2af8e7fcd8f02c12ed}{BAD\+\_\+\+MAP\+\_\+\+FILE}}~255
\end{DoxyCompactItemize}
\doxysubsection*{Functions}
\begin{DoxyCompactItemize}
\item 
void \mbox{\hyperlink{cub3D_8h_a3443be67d00219beaaad98305349ce07}{draw\+\_\+map}} (struct \mbox{\hyperlink{structs__map__data}{s\+\_\+map\+\_\+data}} $\ast$map\+\_\+data)
\item 
void \mbox{\hyperlink{cub3D_8h_aa2d20c5e42ff62d43c7ffab6d84dc5dd}{initialize\+\_\+map\+\_\+data}} (struct \mbox{\hyperlink{structs__map__data}{s\+\_\+map\+\_\+data}} $\ast$$\ast$map\+\_\+data, char $\ast$map\+\_\+file)
\begin{DoxyCompactList}\small\item\em Initializes map data. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{cub3D_8h_a9b9c00429f52ccf4cb4a0cf0967f6394}{destroy\+\_\+map\+\_\+data}} (struct \mbox{\hyperlink{structs__map__data}{s\+\_\+map\+\_\+data}} $\ast$$\ast$map\+\_\+data)
\begin{DoxyCompactList}\small\item\em Destroys map data. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{cub3D_8h_a968801b6df4daa98b46851157bfbacab}{print\+\_\+error}} (int error)
\begin{DoxyCompactList}\small\item\em Prints an error message to the standard error output and exits with the function parameter passed error code. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{cub3D_8h_ad12f49185b9cfb483605a617c9484f25}{cleanup\+\_\+and\+\_\+exit}} (int error, int file, char $\ast$buffer)
\begin{DoxyCompactList}\small\item\em Frees any allocated memory and exits the program with the given error number. \end{DoxyCompactList}\item 
int \mbox{\hyperlink{cub3D_8h_a973f5273453bacdf37c27ef24bdd540d}{get\+\_\+total\+\_\+bytes}} (char $\ast$filename)
\begin{DoxyCompactList}\small\item\em Returns the total number of bytes in the file with the given filename. \end{DoxyCompactList}\item 
char $\ast$ \mbox{\hyperlink{cub3D_8h_a953ff0338bfa5e5863fc98056025e303}{read\+\_\+map}} (char $\ast$filename)
\begin{DoxyCompactList}\small\item\em Reads the contents of the file with the given name into a dynamically allocated buffer. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{cub3D_8h_a8034e3c8d12267f763e14f44c8da3d43}{free\+\_\+array\+\_\+of\+\_\+memory}} (char $\ast$$\ast$string\+\_\+array)
\begin{DoxyCompactList}\small\item\em Frees memory allocated for a string array. \end{DoxyCompactList}\item 
int \mbox{\hyperlink{cub3D_8h_a8b69eb84595662299e24d7bf079c1709}{get\+\_\+map\+\_\+height}} (char $\ast$$\ast$map\+\_\+array)
\begin{DoxyCompactList}\small\item\em Gets the height of a map. \end{DoxyCompactList}\item 
int \mbox{\hyperlink{cub3D_8h_ae82ab44de3b7db5df0474efb78347c37}{has\+\_\+invalid\+\_\+map\+\_\+extension}} (char $\ast$filename)
\begin{DoxyCompactList}\small\item\em Checks if the given filename has a valid extension. \end{DoxyCompactList}\item 
int \mbox{\hyperlink{cub3D_8h_a28722e35659ad0e59ef9d1f1c09e23f1}{is\+\_\+valid\+\_\+filename}} (char $\ast$filename)
\begin{DoxyCompactList}\small\item\em Checks if the given filename is valid. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{cub3D_8h_a66378599b8e9ef436a2e73192b5364a8}{protected\+\_\+malloc}} (void $\ast$$\ast$parameter, size\+\_\+t size\+\_\+of\+\_\+parameter)
\item 
void \mbox{\hyperlink{cub3D_8h_ab1c2d2b6d5eaaa4e4602c09659d51d3d}{initialize\+\_\+game\+\_\+data}} (struct \mbox{\hyperlink{structs__game__data}{s\+\_\+game\+\_\+data}} $\ast$$\ast$game\+\_\+data, struct \mbox{\hyperlink{structs__map__data}{s\+\_\+map\+\_\+data}} $\ast$map\+\_\+data)
\item 
void \mbox{\hyperlink{cub3D_8h_a356733f8825c30cebb2db84f94eb95a7}{destroy\+\_\+game\+\_\+data}} (struct \mbox{\hyperlink{structs__game__data}{s\+\_\+game\+\_\+data}} $\ast$$\ast$game\+\_\+data)
\end{DoxyCompactItemize}


\doxysubsection{Macro Definition Documentation}
\mbox{\Hypertarget{cub3D_8h_a8e0ad1ba0b05ba2af8e7fcd8f02c12ed}\label{cub3D_8h_a8e0ad1ba0b05ba2af8e7fcd8f02c12ed}} 
\index{cub3D.h@{cub3D.h}!BAD\_MAP\_FILE@{BAD\_MAP\_FILE}}
\index{BAD\_MAP\_FILE@{BAD\_MAP\_FILE}!cub3D.h@{cub3D.h}}
\doxysubsubsection{\texorpdfstring{BAD\_MAP\_FILE}{BAD\_MAP\_FILE}}
{\footnotesize\ttfamily \#define BAD\+\_\+\+MAP\+\_\+\+FILE~255}



Definition at line \mbox{\hyperlink{cub3D_8h_source_l00017}{17}} of file \mbox{\hyperlink{cub3D_8h_source}{cub3\+D.\+h}}.

\mbox{\Hypertarget{cub3D_8h_a4635f2163efe937e76598aff306d35d1}\label{cub3D_8h_a4635f2163efe937e76598aff306d35d1}} 
\index{cub3D.h@{cub3D.h}!EMPTY\_MAP@{EMPTY\_MAP}}
\index{EMPTY\_MAP@{EMPTY\_MAP}!cub3D.h@{cub3D.h}}
\doxysubsubsection{\texorpdfstring{EMPTY\_MAP}{EMPTY\_MAP}}
{\footnotesize\ttfamily \#define EMPTY\+\_\+\+MAP~254}



Definition at line \mbox{\hyperlink{cub3D_8h_source_l00015}{15}} of file \mbox{\hyperlink{cub3D_8h_source}{cub3\+D.\+h}}.

\mbox{\Hypertarget{cub3D_8h_aa93f0eb578d23995850d61f7d61c55c1}\label{cub3D_8h_aa93f0eb578d23995850d61f7d61c55c1}} 
\index{cub3D.h@{cub3D.h}!FALSE@{FALSE}}
\index{FALSE@{FALSE}!cub3D.h@{cub3D.h}}
\doxysubsubsection{\texorpdfstring{FALSE}{FALSE}}
{\footnotesize\ttfamily \#define FALSE~0}



Definition at line \mbox{\hyperlink{cub3D_8h_source_l00013}{13}} of file \mbox{\hyperlink{cub3D_8h_source}{cub3\+D.\+h}}.

\mbox{\Hypertarget{cub3D_8h_ae9c7e3e493aaf9541c7dc341111be1f9}\label{cub3D_8h_ae9c7e3e493aaf9541c7dc341111be1f9}} 
\index{cub3D.h@{cub3D.h}!IS\_DIRECTORY@{IS\_DIRECTORY}}
\index{IS\_DIRECTORY@{IS\_DIRECTORY}!cub3D.h@{cub3D.h}}
\doxysubsubsection{\texorpdfstring{IS\_DIRECTORY}{IS\_DIRECTORY}}
{\footnotesize\ttfamily \#define IS\+\_\+\+DIRECTORY~21}



Definition at line \mbox{\hyperlink{cub3D_8h_source_l00016}{16}} of file \mbox{\hyperlink{cub3D_8h_source}{cub3\+D.\+h}}.

\mbox{\Hypertarget{cub3D_8h_a2706e5298e357ffb64b22c7e7fc1b3e9}\label{cub3D_8h_a2706e5298e357ffb64b22c7e7fc1b3e9}} 
\index{cub3D.h@{cub3D.h}!TILE@{TILE}}
\index{TILE@{TILE}!cub3D.h@{cub3D.h}}
\doxysubsubsection{\texorpdfstring{TILE}{TILE}}
{\footnotesize\ttfamily \#define TILE~64}



Definition at line \mbox{\hyperlink{cub3D_8h_source_l00014}{14}} of file \mbox{\hyperlink{cub3D_8h_source}{cub3\+D.\+h}}.

\mbox{\Hypertarget{cub3D_8h_aa8cecfc5c5c054d2875c03e77b7be15d}\label{cub3D_8h_aa8cecfc5c5c054d2875c03e77b7be15d}} 
\index{cub3D.h@{cub3D.h}!TRUE@{TRUE}}
\index{TRUE@{TRUE}!cub3D.h@{cub3D.h}}
\doxysubsubsection{\texorpdfstring{TRUE}{TRUE}}
{\footnotesize\ttfamily \#define TRUE~1}



Definition at line \mbox{\hyperlink{cub3D_8h_source_l00012}{12}} of file \mbox{\hyperlink{cub3D_8h_source}{cub3\+D.\+h}}.



\doxysubsection{Function Documentation}
\mbox{\Hypertarget{cub3D_8h_ad12f49185b9cfb483605a617c9484f25}\label{cub3D_8h_ad12f49185b9cfb483605a617c9484f25}} 
\index{cub3D.h@{cub3D.h}!cleanup\_and\_exit@{cleanup\_and\_exit}}
\index{cleanup\_and\_exit@{cleanup\_and\_exit}!cub3D.h@{cub3D.h}}
\doxysubsubsection{\texorpdfstring{cleanup\_and\_exit()}{cleanup\_and\_exit()}}
{\footnotesize\ttfamily void cleanup\+\_\+and\+\_\+exit (\begin{DoxyParamCaption}\item[{int}]{error,  }\item[{int}]{file,  }\item[{char $\ast$}]{buffer }\end{DoxyParamCaption})}



Frees any allocated memory and exits the program with the given error number. 


\begin{DoxyParams}{Parameters}
{\em error} & The error number to print. \\
\hline
{\em file} & The file descriptor to close. \\
\hline
{\em buffer} & The buffer to free.\\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
void. 
\end{DoxyReturn}


Definition at line \mbox{\hyperlink{error__handling_8c_source_l00022}{22}} of file \mbox{\hyperlink{error__handling_8c_source}{error\+\_\+handling.\+c}}.


\begin{DoxyCode}{0}
\DoxyCodeLine{00023\ \{}
\DoxyCodeLine{00024\ \ \ \ \ \textcolor{keywordflow}{if}\ (file\ >\ 0)}
\DoxyCodeLine{00025\ \ \ \ \ \ \ \ \ close(file);}
\DoxyCodeLine{00026\ \ \ \ \ \textcolor{keywordflow}{if}\ (buffer\ !=\ NULL)}
\DoxyCodeLine{00027\ \ \ \ \ \ \ \ \ free(buffer);}
\DoxyCodeLine{00028\ \ \ \ \ \mbox{\hyperlink{error__handling_8c_a968801b6df4daa98b46851157bfbacab}{print\_error}}(error);}
\DoxyCodeLine{00029\ \}}

\end{DoxyCode}
Here is the call graph for this function\+:
% FIG 2
Here is the caller graph for this function\+:
% FIG 3
\mbox{\Hypertarget{cub3D_8h_a356733f8825c30cebb2db84f94eb95a7}\label{cub3D_8h_a356733f8825c30cebb2db84f94eb95a7}} 
\index{cub3D.h@{cub3D.h}!destroy\_game\_data@{destroy\_game\_data}}
\index{destroy\_game\_data@{destroy\_game\_data}!cub3D.h@{cub3D.h}}
\doxysubsubsection{\texorpdfstring{destroy\_game\_data()}{destroy\_game\_data()}}
{\footnotesize\ttfamily void destroy\+\_\+game\+\_\+data (\begin{DoxyParamCaption}\item[{struct \mbox{\hyperlink{structs__game__data}{s\+\_\+game\+\_\+data}} $\ast$$\ast$}]{game\+\_\+data }\end{DoxyParamCaption})}



Definition at line \mbox{\hyperlink{draw__map__utils_8c_source_l00070}{70}} of file \mbox{\hyperlink{draw__map__utils_8c_source}{draw\+\_\+map\+\_\+utils.\+c}}.


\begin{DoxyCode}{0}
\DoxyCodeLine{00071\ \{}
\DoxyCodeLine{00072\ \ \ \ \ free((*game\_data));}
\DoxyCodeLine{00073\ \}}

\end{DoxyCode}
Here is the caller graph for this function\+:
% FIG 4
\mbox{\Hypertarget{cub3D_8h_a9b9c00429f52ccf4cb4a0cf0967f6394}\label{cub3D_8h_a9b9c00429f52ccf4cb4a0cf0967f6394}} 
\index{cub3D.h@{cub3D.h}!destroy\_map\_data@{destroy\_map\_data}}
\index{destroy\_map\_data@{destroy\_map\_data}!cub3D.h@{cub3D.h}}
\doxysubsubsection{\texorpdfstring{destroy\_map\_data()}{destroy\_map\_data()}}
{\footnotesize\ttfamily void destroy\+\_\+map\+\_\+data (\begin{DoxyParamCaption}\item[{struct \mbox{\hyperlink{structs__map__data}{s\+\_\+map\+\_\+data}} $\ast$$\ast$}]{map\+\_\+data }\end{DoxyParamCaption})}



Destroys map data. 

This function frees memory allocated for a map\+\_\+data struct and its components.


\begin{DoxyParams}{Parameters}
{\em map\+\_\+data} & A pointer to the map\+\_\+data struct to be destroyed. \\
\hline
\end{DoxyParams}


Definition at line \mbox{\hyperlink{draw__map__utils_8c_source_l00075}{75}} of file \mbox{\hyperlink{draw__map__utils_8c_source}{draw\+\_\+map\+\_\+utils.\+c}}.


\begin{DoxyCode}{0}
\DoxyCodeLine{00076\ \{}
\DoxyCodeLine{00077\ \ \ \ \ \textcolor{keywordflow}{if}\ ((*map\_data)-\/>map\_string)}
\DoxyCodeLine{00078\ \ \ \ \ \ \ \ \ free((*map\_data)-\/>map\_string);}
\DoxyCodeLine{00079\ \ \ \ \ \textcolor{keywordflow}{if}\ ((*map\_data)-\/>map\_array)}
\DoxyCodeLine{00080\ \ \ \ \ \ \ \ \ \mbox{\hyperlink{draw__map__utils_8c_a8034e3c8d12267f763e14f44c8da3d43}{free\_array\_of\_memory}}((*map\_data)-\/>map\_array);}
\DoxyCodeLine{00081\ \ \ \ \ free((*map\_data));}
\DoxyCodeLine{00082\ \}}

\end{DoxyCode}
Here is the call graph for this function\+:
% FIG 5
Here is the caller graph for this function\+:
% FIG 6
\mbox{\Hypertarget{cub3D_8h_a3443be67d00219beaaad98305349ce07}\label{cub3D_8h_a3443be67d00219beaaad98305349ce07}} 
\index{cub3D.h@{cub3D.h}!draw\_map@{draw\_map}}
\index{draw\_map@{draw\_map}!cub3D.h@{cub3D.h}}
\doxysubsubsection{\texorpdfstring{draw\_map()}{draw\_map()}}
{\footnotesize\ttfamily void draw\+\_\+map (\begin{DoxyParamCaption}\item[{struct \mbox{\hyperlink{structs__map__data}{s\+\_\+map\+\_\+data}} $\ast$}]{map\+\_\+data }\end{DoxyParamCaption})}



Definition at line \mbox{\hyperlink{draw__map_8c_source_l00155}{155}} of file \mbox{\hyperlink{draw__map_8c_source}{draw\+\_\+map.\+c}}.


\begin{DoxyCode}{0}
\DoxyCodeLine{00156\ \{}
\DoxyCodeLine{00157\ \ \ \ \ \textcolor{keyword}{struct\ }\mbox{\hyperlink{structs__game__data}{s\_game\_data}}\ \ \ *game\_data;}
\DoxyCodeLine{00158\ }
\DoxyCodeLine{00159\ \ \ \ \ game\_data\ =\ NULL;}
\DoxyCodeLine{00160\ \ \ \ \ \mbox{\hyperlink{cub3D_8h_ab1c2d2b6d5eaaa4e4602c09659d51d3d}{initialize\_game\_data}}(\&game\_data,\ \mbox{\hyperlink{structs__game__data_a67e1cd5cf12b83ff14d0c488c65f76e9}{map\_data}});}
\DoxyCodeLine{00161\ \ \ \ \ \mbox{\hyperlink{draw__map_8c_a97d700c0c000abcc642a44c27e85afef}{place\_image\_to\_screen}}(\&game\_data,\ \mbox{\hyperlink{structs__game__data_a67e1cd5cf12b83ff14d0c488c65f76e9}{map\_data}});}
\DoxyCodeLine{00162\ \ \ \ \ \mbox{\hyperlink{draw__map_8c_ad1d783c8f0f0cff7b80b71c22944d648}{draw\_grid}}(\mbox{\hyperlink{structs__game__data_a67e1cd5cf12b83ff14d0c488c65f76e9}{map\_data}},\ game\_data-\/>\mbox{\hyperlink{structs__game__data_a9469f6a12260a7bc586d8934bc3120dc}{mlx\_background\_image}});}
\DoxyCodeLine{00163\ \ \ \ \ \mbox{\hyperlink{draw__map_8c_aa54199ea768b27cd270ff94975ac0f46}{draw\_walls}}(game\_data);}
\DoxyCodeLine{00164\ \ \ \ \ \mbox{\hyperlink{draw__map_8c_ac35b39a660a405d9638cb1483d8fe93a}{draw\_player}}(game\_data);}
\DoxyCodeLine{00165\ \ \ \ \ mlx\_loop\_hook(game\_data-\/>\mbox{\hyperlink{structs__game__data_ad9fd52da8c21de0b10b15b79c01f09c9}{mlx\_handle}},\ \mbox{\hyperlink{draw__map_8c_a4b7144f73d9e8c25ca55c890584b5c0e}{ft\_hook}},\ game\_data);}
\DoxyCodeLine{00166\ \ \ \ \ mlx\_loop(game\_data-\/>\mbox{\hyperlink{structs__game__data_ad9fd52da8c21de0b10b15b79c01f09c9}{mlx\_handle}});}
\DoxyCodeLine{00167\ \ \ \ \ mlx\_terminate(game\_data-\/>\mbox{\hyperlink{structs__game__data_ad9fd52da8c21de0b10b15b79c01f09c9}{mlx\_handle}});}
\DoxyCodeLine{00168\ \ \ \ \ \textcolor{keywordflow}{if}\ (game\_data)}
\DoxyCodeLine{00169\ \ \ \ \ \ \ \ \ \mbox{\hyperlink{cub3D_8h_a356733f8825c30cebb2db84f94eb95a7}{destroy\_game\_data}}(\&game\_data);}
\DoxyCodeLine{00170\ \}}

\end{DoxyCode}
Here is the call graph for this function\+:
% FIG 7
Here is the caller graph for this function\+:
% FIG 8
\mbox{\Hypertarget{cub3D_8h_a8034e3c8d12267f763e14f44c8da3d43}\label{cub3D_8h_a8034e3c8d12267f763e14f44c8da3d43}} 
\index{cub3D.h@{cub3D.h}!free\_array\_of\_memory@{free\_array\_of\_memory}}
\index{free\_array\_of\_memory@{free\_array\_of\_memory}!cub3D.h@{cub3D.h}}
\doxysubsubsection{\texorpdfstring{free\_array\_of\_memory()}{free\_array\_of\_memory()}}
{\footnotesize\ttfamily void free\+\_\+array\+\_\+of\+\_\+memory (\begin{DoxyParamCaption}\item[{char $\ast$$\ast$}]{string\+\_\+array }\end{DoxyParamCaption})}



Frees memory allocated for a string array. 

This function frees the memory that was allocated for a string array.


\begin{DoxyParams}{Parameters}
{\em string\+\_\+array} & The string array to be freed. \\
\hline
\end{DoxyParams}


Definition at line \mbox{\hyperlink{draw__map__utils_8c_source_l00004}{4}} of file \mbox{\hyperlink{draw__map__utils_8c_source}{draw\+\_\+map\+\_\+utils.\+c}}.


\begin{DoxyCode}{0}
\DoxyCodeLine{00005\ \{}
\DoxyCodeLine{00006\ \ \ \ \ \textcolor{keywordtype}{int}\ index;\ \ }
\DoxyCodeLine{00007\ }
\DoxyCodeLine{00008\ \ \ \ \ index\ =\ -\/1;}
\DoxyCodeLine{00009\ \ \ \ \ \textcolor{keywordflow}{while}\ (string\_array[++index])}
\DoxyCodeLine{00010\ \ \ \ \ \ \ \ \ free(string\_array[index]);}
\DoxyCodeLine{00011\ \ \ \ \ free(string\_array);}
\DoxyCodeLine{00012\ \}}

\end{DoxyCode}
Here is the caller graph for this function\+:
% FIG 9
\mbox{\Hypertarget{cub3D_8h_a8b69eb84595662299e24d7bf079c1709}\label{cub3D_8h_a8b69eb84595662299e24d7bf079c1709}} 
\index{cub3D.h@{cub3D.h}!get\_map\_height@{get\_map\_height}}
\index{get\_map\_height@{get\_map\_height}!cub3D.h@{cub3D.h}}
\doxysubsubsection{\texorpdfstring{get\_map\_height()}{get\_map\_height()}}
{\footnotesize\ttfamily int get\+\_\+map\+\_\+height (\begin{DoxyParamCaption}\item[{char $\ast$$\ast$}]{map\+\_\+array }\end{DoxyParamCaption})}



Gets the height of a map. 

This function takes a 2D string array representing a map and returns its height.


\begin{DoxyParams}{Parameters}
{\em map\+\_\+array} & The 2D string array representing the map. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
The height of the map. 
\end{DoxyReturn}


Definition at line \mbox{\hyperlink{draw__map__utils_8c_source_l00014}{14}} of file \mbox{\hyperlink{draw__map__utils_8c_source}{draw\+\_\+map\+\_\+utils.\+c}}.


\begin{DoxyCode}{0}
\DoxyCodeLine{00015\ \{}
\DoxyCodeLine{00016\ \ \ \ \ \textcolor{keywordtype}{int}\ index;}
\DoxyCodeLine{00017\ }
\DoxyCodeLine{00018\ \ \ \ \ index\ =\ 0;}
\DoxyCodeLine{00019\ \ \ \ \ \textcolor{keywordflow}{while}\ (map\_array[index])}
\DoxyCodeLine{00020\ \ \ \ \ \ \ \ \ index++;}
\DoxyCodeLine{00021\ \ \ \ \ \textcolor{keywordflow}{return}\ (index);}
\DoxyCodeLine{00022\ \}}

\end{DoxyCode}
Here is the caller graph for this function\+:
% FIG 10
\mbox{\Hypertarget{cub3D_8h_a973f5273453bacdf37c27ef24bdd540d}\label{cub3D_8h_a973f5273453bacdf37c27ef24bdd540d}} 
\index{cub3D.h@{cub3D.h}!get\_total\_bytes@{get\_total\_bytes}}
\index{get\_total\_bytes@{get\_total\_bytes}!cub3D.h@{cub3D.h}}
\doxysubsubsection{\texorpdfstring{get\_total\_bytes()}{get\_total\_bytes()}}
{\footnotesize\ttfamily int get\+\_\+total\+\_\+bytes (\begin{DoxyParamCaption}\item[{char $\ast$}]{filename }\end{DoxyParamCaption})}



Returns the total number of bytes in the file with the given filename. 


\begin{DoxyParams}{Parameters}
{\em filename} & The name of the file.\\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
The total number of bytes in the file. 
\end{DoxyReturn}


Definition at line \mbox{\hyperlink{read__map_8c_source_l00004}{4}} of file \mbox{\hyperlink{read__map_8c_source}{read\+\_\+map.\+c}}.


\begin{DoxyCode}{0}
\DoxyCodeLine{00005\ \{}
\DoxyCodeLine{00006\ \ \ \ \ \textcolor{keywordtype}{int}\ \ \ \ \ file;}
\DoxyCodeLine{00007\ \ \ \ \ \textcolor{keywordtype}{char}\ \ \ \ *string\_buffer;}
\DoxyCodeLine{00008\ \ \ \ \ \textcolor{keywordtype}{int}\ \ \ \ \ total\_bytes;}
\DoxyCodeLine{00009\ \ \ \ \ \textcolor{keywordtype}{int}\ \ \ \ \ bytes\_read;}
\DoxyCodeLine{00010\ }
\DoxyCodeLine{00011\ \ \ \ \ file\ =\ open(filename,\ O\_RDONLY);}
\DoxyCodeLine{00012\ \ \ \ \ \textcolor{keywordflow}{if}\ (file\ ==\ -\/1)}
\DoxyCodeLine{00013\ \ \ \ \ \ \ \ \ \mbox{\hyperlink{cub3D_8h_a968801b6df4daa98b46851157bfbacab}{print\_error}}(errno);}
\DoxyCodeLine{00014\ \ \ \ \ string\_buffer\ =\ (\textcolor{keywordtype}{char}\ *)malloc(\textcolor{keyword}{sizeof}(\textcolor{keywordtype}{char})\ *\ 100);}
\DoxyCodeLine{00015\ \ \ \ \ \textcolor{keywordflow}{if}\ (!string\_buffer)}
\DoxyCodeLine{00016\ \ \ \ \ \ \ \ \ \mbox{\hyperlink{cub3D_8h_ad12f49185b9cfb483605a617c9484f25}{cleanup\_and\_exit}}(errno,\ file,\ NULL);}
\DoxyCodeLine{00017\ \ \ \ \ bytes\_read\ =\ read(file,\ string\_buffer,\ 100);}
\DoxyCodeLine{00018\ \ \ \ \ \textcolor{keywordflow}{if}\ (bytes\_read\ ==\ -\/1)}
\DoxyCodeLine{00019\ \ \ \ \ \ \ \ \ \mbox{\hyperlink{cub3D_8h_ad12f49185b9cfb483605a617c9484f25}{cleanup\_and\_exit}}(errno,\ file,\ string\_buffer);}
\DoxyCodeLine{00020\ \ \ \ \ total\_bytes\ =\ bytes\_read;}
\DoxyCodeLine{00021\ \ \ \ \ \textcolor{keywordflow}{while}\ (bytes\_read\ >\ 0)}
\DoxyCodeLine{00022\ \ \ \ \ \{}
\DoxyCodeLine{00023\ \ \ \ \ \ \ \ \ bytes\_read\ =\ read(file,\ string\_buffer,\ 100);}
\DoxyCodeLine{00024\ \ \ \ \ \ \ \ \ \textcolor{keywordflow}{if}\ (bytes\_read\ ==\ -\/1)}
\DoxyCodeLine{00025\ \ \ \ \ \ \ \ \ \ \ \ \ \mbox{\hyperlink{cub3D_8h_ad12f49185b9cfb483605a617c9484f25}{cleanup\_and\_exit}}(errno,\ file,\ string\_buffer);}
\DoxyCodeLine{00026\ \ \ \ \ \ \ \ \ total\_bytes\ +=\ bytes\_read;}
\DoxyCodeLine{00027\ \ \ \ \ \}}
\DoxyCodeLine{00028\ \ \ \ \ close(file);}
\DoxyCodeLine{00029\ \ \ \ \ free(string\_buffer);}
\DoxyCodeLine{00030\ \ \ \ \ \textcolor{keywordflow}{return}\ (total\_bytes);}
\DoxyCodeLine{00031\ \}}

\end{DoxyCode}
Here is the call graph for this function\+:
% FIG 11
Here is the caller graph for this function\+:
% FIG 12
\mbox{\Hypertarget{cub3D_8h_ae82ab44de3b7db5df0474efb78347c37}\label{cub3D_8h_ae82ab44de3b7db5df0474efb78347c37}} 
\index{cub3D.h@{cub3D.h}!has\_invalid\_map\_extension@{has\_invalid\_map\_extension}}
\index{has\_invalid\_map\_extension@{has\_invalid\_map\_extension}!cub3D.h@{cub3D.h}}
\doxysubsubsection{\texorpdfstring{has\_invalid\_map\_extension()}{has\_invalid\_map\_extension()}}
{\footnotesize\ttfamily int has\+\_\+invalid\+\_\+map\+\_\+extension (\begin{DoxyParamCaption}\item[{char $\ast$}]{filename }\end{DoxyParamCaption})}



Checks if the given filename has a valid extension. 

This function checks if the extension of the given filename is \char`\"{}.\+cub\char`\"{}.


\begin{DoxyParams}{Parameters}
{\em filename} & The filename to check. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
Returns TRUE (1) if the extension is valid, and FALSE (0) otherwise. 
\end{DoxyReturn}


Definition at line \mbox{\hyperlink{error__handling_8c_source_l00031}{31}} of file \mbox{\hyperlink{error__handling_8c_source}{error\+\_\+handling.\+c}}.


\begin{DoxyCode}{0}
\DoxyCodeLine{00032\ \{}
\DoxyCodeLine{00033\ \ \ \ \ \textcolor{keywordtype}{int}\ filename\_length;}
\DoxyCodeLine{00034\ }
\DoxyCodeLine{00035\ \ \ \ \ filename\_length\ =\ \mbox{\hyperlink{libft_8h_a828402378653640f545a4be2e00e92f9}{ft\_strlen}}(filename);}
\DoxyCodeLine{00036\ \ \ \ \ \textcolor{keywordflow}{if}\ (\mbox{\hyperlink{libft_8h_a9d2fe792187aa4ed08e5864fb2c4d6dc}{ft\_strncmp}}(filename\ +\ (filename\_length\ -\/\ 4),\ \textcolor{stringliteral}{"{}.cub\(\backslash\)0"{}},\ 5))}
\DoxyCodeLine{00037\ \ \ \ \ \ \ \ \ \textcolor{keywordflow}{return}(\mbox{\hyperlink{cub3D_8h_aa8cecfc5c5c054d2875c03e77b7be15d}{TRUE}});}
\DoxyCodeLine{00038\ \ \ \ \ \textcolor{keywordflow}{return}(\mbox{\hyperlink{cub3D_8h_aa93f0eb578d23995850d61f7d61c55c1}{FALSE}});}
\DoxyCodeLine{00039\ \}}

\end{DoxyCode}
Here is the call graph for this function\+:
% FIG 13
Here is the caller graph for this function\+:
% FIG 14
\mbox{\Hypertarget{cub3D_8h_ab1c2d2b6d5eaaa4e4602c09659d51d3d}\label{cub3D_8h_ab1c2d2b6d5eaaa4e4602c09659d51d3d}} 
\index{cub3D.h@{cub3D.h}!initialize\_game\_data@{initialize\_game\_data}}
\index{initialize\_game\_data@{initialize\_game\_data}!cub3D.h@{cub3D.h}}
\doxysubsubsection{\texorpdfstring{initialize\_game\_data()}{initialize\_game\_data()}}
{\footnotesize\ttfamily void initialize\+\_\+game\+\_\+data (\begin{DoxyParamCaption}\item[{struct \mbox{\hyperlink{structs__game__data}{s\+\_\+game\+\_\+data}} $\ast$$\ast$}]{game\+\_\+data,  }\item[{struct \mbox{\hyperlink{structs__map__data}{s\+\_\+map\+\_\+data}} $\ast$}]{map\+\_\+data }\end{DoxyParamCaption})}



Definition at line \mbox{\hyperlink{draw__map__utils_8c_source_l00024}{24}} of file \mbox{\hyperlink{draw__map__utils_8c_source}{draw\+\_\+map\+\_\+utils.\+c}}.


\begin{DoxyCode}{0}
\DoxyCodeLine{00026\ \{}
\DoxyCodeLine{00027\ \ \ \ \ mlx\_t*\ \ \ \ \ \ \ \ \ \ mlx;}
\DoxyCodeLine{00028\ \ \ \ \ mlx\_image\_t*\ \ \ \ image;}
\DoxyCodeLine{00029\ }
\DoxyCodeLine{00030\ \ \ \ \ *game\_data\ =\ (\textcolor{keyword}{struct\ }\mbox{\hyperlink{structs__game__data}{s\_game\_data}}\ *)malloc(\textcolor{keyword}{sizeof}(\textcolor{keyword}{struct}\ \mbox{\hyperlink{structs__game__data}{s\_game\_data}}));}
\DoxyCodeLine{00031\ \ \ \ \ \textcolor{keywordflow}{if}\ (game\_data\ ==\ NULL)}
\DoxyCodeLine{00032\ \ \ \ \ \ \ \ \ \mbox{\hyperlink{cub3D_8h_ad12f49185b9cfb483605a617c9484f25}{cleanup\_and\_exit}}(errno,\ 0,\ NULL);}
\DoxyCodeLine{00033\ \ \ \ \ \textcolor{keywordflow}{if}\ (!(mlx\ =\ mlx\_init(\mbox{\hyperlink{structs__game__data_a67e1cd5cf12b83ff14d0c488c65f76e9}{map\_data}}-\/>\mbox{\hyperlink{structs__map__data_a6c935e0fd9d156d75d36287be039e256}{width}},\ \mbox{\hyperlink{structs__game__data_a67e1cd5cf12b83ff14d0c488c65f76e9}{map\_data}}-\/>\mbox{\hyperlink{structs__map__data_a3dc97c8f3b6eaa17bf4e5fe4467d9b98}{height}},\ \textcolor{stringliteral}{"{}cub3D"{}},\ \textcolor{keyword}{true})))}
\DoxyCodeLine{00034\ \ \ \ \ \{}
\DoxyCodeLine{00035\ \ \ \ \ \ \ \ \ \mbox{\hyperlink{libft_8h_acefce9ac519f8f8b7d3fde33dbafe469}{ft\_putstr\_fd}}((\textcolor{keywordtype}{char}\ *)mlx\_strerror(mlx\_errno),\ 2);}
\DoxyCodeLine{00036\ \ \ \ \ \}}
\DoxyCodeLine{00037\ \ \ \ \ \textcolor{keywordflow}{if}\ (!(image\ =\ mlx\_new\_image(mlx,\ \mbox{\hyperlink{structs__game__data_a67e1cd5cf12b83ff14d0c488c65f76e9}{map\_data}}-\/>\mbox{\hyperlink{structs__map__data_a6c935e0fd9d156d75d36287be039e256}{width}},\ \mbox{\hyperlink{structs__game__data_a67e1cd5cf12b83ff14d0c488c65f76e9}{map\_data}}-\/>\mbox{\hyperlink{structs__map__data_a3dc97c8f3b6eaa17bf4e5fe4467d9b98}{height}})))}
\DoxyCodeLine{00038\ \ \ \ \ \{}
\DoxyCodeLine{00039\ \ \ \ \ \ \ \ \ mlx\_close\_window(mlx);}
\DoxyCodeLine{00040\ \ \ \ \ \ \ \ \ \mbox{\hyperlink{libft_8h_acefce9ac519f8f8b7d3fde33dbafe469}{ft\_putstr\_fd}}((\textcolor{keywordtype}{char}\ *)mlx\_strerror(mlx\_errno),\ 2);}
\DoxyCodeLine{00041\ \ \ \ \ \}}
\DoxyCodeLine{00042\ \ \ \ \ (*game\_data)-\/>mlx\_handle\ =\ mlx;}
\DoxyCodeLine{00043\ \ \ \ \ (*game\_data)-\/>mlx\_background\_image\ =\ image;}
\DoxyCodeLine{00044\ \ \ \ \ (*game\_data)-\/>map\_data\ =\ \mbox{\hyperlink{structs__game__data_a67e1cd5cf12b83ff14d0c488c65f76e9}{map\_data}};}
\DoxyCodeLine{00045\ \ \ \ \ (*game\_data)-\/>player\_data.player\_image\ =\ NULL;}
\DoxyCodeLine{00046\ \}}

\end{DoxyCode}
Here is the call graph for this function\+:
% FIG 15
Here is the caller graph for this function\+:
% FIG 16
\mbox{\Hypertarget{cub3D_8h_aa2d20c5e42ff62d43c7ffab6d84dc5dd}\label{cub3D_8h_aa2d20c5e42ff62d43c7ffab6d84dc5dd}} 
\index{cub3D.h@{cub3D.h}!initialize\_map\_data@{initialize\_map\_data}}
\index{initialize\_map\_data@{initialize\_map\_data}!cub3D.h@{cub3D.h}}
\doxysubsubsection{\texorpdfstring{initialize\_map\_data()}{initialize\_map\_data()}}
{\footnotesize\ttfamily void initialize\+\_\+map\+\_\+data (\begin{DoxyParamCaption}\item[{struct \mbox{\hyperlink{structs__map__data}{s\+\_\+map\+\_\+data}} $\ast$$\ast$}]{map\+\_\+data,  }\item[{char $\ast$}]{map\+\_\+file }\end{DoxyParamCaption})}



Initializes map data. 

This function initializes a map\+\_\+data struct and sets its map\+\_\+string map\+\_\+array, width, and height values.


\begin{DoxyParams}{Parameters}
{\em map\+\_\+data} & A pointer to the map\+\_\+data struct to be initialized. \\
\hline
{\em map\+\_\+file} & The file path of the map file to be read. \\
\hline
\end{DoxyParams}


Definition at line \mbox{\hyperlink{draw__map__utils_8c_source_l00048}{48}} of file \mbox{\hyperlink{draw__map__utils_8c_source}{draw\+\_\+map\+\_\+utils.\+c}}.


\begin{DoxyCode}{0}
\DoxyCodeLine{00049\ \{}
\DoxyCodeLine{00050\ \ \ \ \ \textcolor{keywordtype}{char}\ \ \ \ *map\_string;}
\DoxyCodeLine{00051\ }
\DoxyCodeLine{00052\ \ \ \ \ map\_string\ =\ \mbox{\hyperlink{cub3D_8h_a953ff0338bfa5e5863fc98056025e303}{read\_map}}(map\_file);}
\DoxyCodeLine{00053\ \ \ \ \ \textcolor{keywordflow}{if}\ (map\_string\ ==\ NULL)}
\DoxyCodeLine{00054\ \ \ \ \ \ \ \ \ \mbox{\hyperlink{cub3D_8h_ad12f49185b9cfb483605a617c9484f25}{cleanup\_and\_exit}}(errno,\ 0,\ NULL);}
\DoxyCodeLine{00055\ \ \ \ \ *map\_data\ =\ (\textcolor{keyword}{struct\ }\mbox{\hyperlink{structs__map__data}{s\_map\_data}}\ *)malloc(\textcolor{keyword}{sizeof}(\textcolor{keyword}{struct}\ \mbox{\hyperlink{structs__map__data}{s\_map\_data}}));}
\DoxyCodeLine{00056\ \ \ \ \ \textcolor{keywordflow}{if}\ (map\_data\ ==\ NULL)}
\DoxyCodeLine{00057\ \ \ \ \ \ \ \ \ \mbox{\hyperlink{cub3D_8h_ad12f49185b9cfb483605a617c9484f25}{cleanup\_and\_exit}}(errno,\ 0,\ \mbox{\hyperlink{structs__map__data_a78e4cdf90cbb511d692e8792cc3de949}{map\_string}});}
\DoxyCodeLine{00058\ \ \ \ \ (*map\_data)-\/>map\_string\ =\ \mbox{\hyperlink{structs__map__data_a78e4cdf90cbb511d692e8792cc3de949}{map\_string}};}
\DoxyCodeLine{00059\ \ \ \ \ (*map\_data)-\/>map\_array\ =\ \mbox{\hyperlink{libft_8h_aa65c9de65051c8c589286cf133c4a1f4}{ft\_split}}((*map\_data)-\/>map\_string,\ \textcolor{charliteral}{'\(\backslash\)n'});}
\DoxyCodeLine{00060\ \ \ \ \ \textcolor{keywordflow}{if}\ ((*map\_data)-\/>map\_array\ ==\ NULL)}
\DoxyCodeLine{00061\ \ \ \ \ \{}
\DoxyCodeLine{00062\ \ \ \ \ \ \ \ \ free((*map\_data)-\/>map\_string);}
\DoxyCodeLine{00063\ \ \ \ \ \ \ \ \ free(*map\_data);}
\DoxyCodeLine{00064\ \ \ \ \ \ \ \ \ exit(errno);}
\DoxyCodeLine{00065\ \ \ \ \ \}}
\DoxyCodeLine{00066\ \ \ \ \ (*map\_data)-\/>width\ =\ \mbox{\hyperlink{libft_8h_a828402378653640f545a4be2e00e92f9}{ft\_strlen}}((*map\_data)-\/>map\_array[0])\ *\ \mbox{\hyperlink{cub3D_8h_a2706e5298e357ffb64b22c7e7fc1b3e9}{TILE}};}
\DoxyCodeLine{00067\ \ \ \ \ (*map\_data)-\/>height\ =\ \mbox{\hyperlink{draw__map__utils_8c_a8b69eb84595662299e24d7bf079c1709}{get\_map\_height}}((*map\_data)-\/>map\_array)\ *\ \mbox{\hyperlink{cub3D_8h_a2706e5298e357ffb64b22c7e7fc1b3e9}{TILE}};}
\DoxyCodeLine{00068\ \}}

\end{DoxyCode}
Here is the call graph for this function\+:
% FIG 17
Here is the caller graph for this function\+:
% FIG 18
\mbox{\Hypertarget{cub3D_8h_a28722e35659ad0e59ef9d1f1c09e23f1}\label{cub3D_8h_a28722e35659ad0e59ef9d1f1c09e23f1}} 
\index{cub3D.h@{cub3D.h}!is\_valid\_filename@{is\_valid\_filename}}
\index{is\_valid\_filename@{is\_valid\_filename}!cub3D.h@{cub3D.h}}
\doxysubsubsection{\texorpdfstring{is\_valid\_filename()}{is\_valid\_filename()}}
{\footnotesize\ttfamily int is\+\_\+valid\+\_\+filename (\begin{DoxyParamCaption}\item[{char $\ast$}]{filename }\end{DoxyParamCaption})}



Checks if the given filename is valid. 

This function checks if the extension of the given filename is valid. If the extension is not valid, it calls the handle\+\_\+error() function with the error code BAD\+\_\+\+MAP\+\_\+\+FILE.


\begin{DoxyParams}{Parameters}
{\em filename} & The filename to check. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
Returns TRUE (1) if the filename is valid, and the handle\+\_\+error() function does not return an error code. Otherwise, it returns FALSE (0). 
\end{DoxyReturn}


Definition at line \mbox{\hyperlink{error__handling_8c_source_l00052}{52}} of file \mbox{\hyperlink{error__handling_8c_source}{error\+\_\+handling.\+c}}.


\begin{DoxyCode}{0}
\DoxyCodeLine{00053\ \{}
\DoxyCodeLine{00054\ \ \ \ \ \textcolor{keywordflow}{if}\ (\mbox{\hyperlink{error__handling_8c_a708cb4d96afdb85180287f9fe26a9076}{is\_directory}}(filename))}
\DoxyCodeLine{00055\ \ \ \ \ \ \ \ \ \mbox{\hyperlink{error__handling_8c_a968801b6df4daa98b46851157bfbacab}{print\_error}}(\mbox{\hyperlink{cub3D_8h_ae9c7e3e493aaf9541c7dc341111be1f9}{IS\_DIRECTORY}});}
\DoxyCodeLine{00056\ \ \ \ \ \textcolor{keywordflow}{if}\ (\mbox{\hyperlink{error__handling_8c_ae82ab44de3b7db5df0474efb78347c37}{has\_invalid\_map\_extension}}(filename))}
\DoxyCodeLine{00057\ \ \ \ \ \ \ \ \ \mbox{\hyperlink{error__handling_8c_a968801b6df4daa98b46851157bfbacab}{print\_error}}(\mbox{\hyperlink{cub3D_8h_a8e0ad1ba0b05ba2af8e7fcd8f02c12ed}{BAD\_MAP\_FILE}});}
\DoxyCodeLine{00058\ \ \ \ \ \textcolor{keywordflow}{return}\ (\mbox{\hyperlink{cub3D_8h_aa8cecfc5c5c054d2875c03e77b7be15d}{TRUE}});}
\DoxyCodeLine{00059\ \}}

\end{DoxyCode}
Here is the call graph for this function\+:
% FIG 19
Here is the caller graph for this function\+:
% FIG 20
\mbox{\Hypertarget{cub3D_8h_a968801b6df4daa98b46851157bfbacab}\label{cub3D_8h_a968801b6df4daa98b46851157bfbacab}} 
\index{cub3D.h@{cub3D.h}!print\_error@{print\_error}}
\index{print\_error@{print\_error}!cub3D.h@{cub3D.h}}
\doxysubsubsection{\texorpdfstring{print\_error()}{print\_error()}}
{\footnotesize\ttfamily void print\+\_\+error (\begin{DoxyParamCaption}\item[{int}]{error }\end{DoxyParamCaption})}



Prints an error message to the standard error output and exits with the function parameter passed error code. 


\begin{DoxyParams}{Parameters}
{\em error} & The error number to print.\\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
void. 
\end{DoxyReturn}


Definition at line \mbox{\hyperlink{error__handling_8c_source_l00004}{4}} of file \mbox{\hyperlink{error__handling_8c_source}{error\+\_\+handling.\+c}}.


\begin{DoxyCode}{0}
\DoxyCodeLine{00005\ \{}
\DoxyCodeLine{00006\ \ \ \ \ \textcolor{keywordflow}{if}\ (error\ ==\ \mbox{\hyperlink{cub3D_8h_a4635f2163efe937e76598aff306d35d1}{EMPTY\_MAP}})}
\DoxyCodeLine{00007\ \ \ \ \ \{}
\DoxyCodeLine{00008\ \ \ \ \ \ \ \ \ write(2,\ \textcolor{stringliteral}{"{}Error:\ Empty\ map\(\backslash\)n"{}},\ 17);}
\DoxyCodeLine{00009\ \ \ \ \ \ \ \ \ exit(error);}
\DoxyCodeLine{00010\ \ \ \ \ \}}
\DoxyCodeLine{00011\ \ \ \ \ \textcolor{keywordflow}{if}\ (error\ ==\ \mbox{\hyperlink{cub3D_8h_a8e0ad1ba0b05ba2af8e7fcd8f02c12ed}{BAD\_MAP\_FILE}})}
\DoxyCodeLine{00012\ \ \ \ \ \{}
\DoxyCodeLine{00013\ \ \ \ \ \ \ \ \ write(2,\ \textcolor{stringliteral}{"{}Error:\ Bad\ map\ file\(\backslash\)n"{}},\ 20);}
\DoxyCodeLine{00014\ \ \ \ \ \ \ \ \ exit(error);}
\DoxyCodeLine{00015\ \ \ \ \ \}}
\DoxyCodeLine{00016\ \ \ \ \ write(2,\ \textcolor{stringliteral}{"{}Error:\ "{}},\ 7);}
\DoxyCodeLine{00017\ \ \ \ \ \mbox{\hyperlink{libft_8h_acefce9ac519f8f8b7d3fde33dbafe469}{ft\_putstr\_fd}}(strerror(error),\ 2);}
\DoxyCodeLine{00018\ \ \ \ \ write(2,\ \textcolor{stringliteral}{"{}\(\backslash\)n"{}},\ 1);}
\DoxyCodeLine{00019\ \ \ \ \ exit(error);}
\DoxyCodeLine{00020\ \}}

\end{DoxyCode}
Here is the call graph for this function\+:
% FIG 21
Here is the caller graph for this function\+:
% FIG 22
\mbox{\Hypertarget{cub3D_8h_a66378599b8e9ef436a2e73192b5364a8}\label{cub3D_8h_a66378599b8e9ef436a2e73192b5364a8}} 
\index{cub3D.h@{cub3D.h}!protected\_malloc@{protected\_malloc}}
\index{protected\_malloc@{protected\_malloc}!cub3D.h@{cub3D.h}}
\doxysubsubsection{\texorpdfstring{protected\_malloc()}{protected\_malloc()}}
{\footnotesize\ttfamily void protected\+\_\+malloc (\begin{DoxyParamCaption}\item[{void $\ast$$\ast$}]{parameter,  }\item[{size\+\_\+t}]{size\+\_\+of\+\_\+parameter }\end{DoxyParamCaption})}

\mbox{\Hypertarget{cub3D_8h_a953ff0338bfa5e5863fc98056025e303}\label{cub3D_8h_a953ff0338bfa5e5863fc98056025e303}} 
\index{cub3D.h@{cub3D.h}!read\_map@{read\_map}}
\index{read\_map@{read\_map}!cub3D.h@{cub3D.h}}
\doxysubsubsection{\texorpdfstring{read\_map()}{read\_map()}}
{\footnotesize\ttfamily char $\ast$ read\+\_\+map (\begin{DoxyParamCaption}\item[{char $\ast$}]{filename }\end{DoxyParamCaption})}



Reads the contents of the file with the given name into a dynamically allocated buffer. 


\begin{DoxyParams}{Parameters}
{\em file} & The name of the file.\\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
A pointer to the dynamically allocated buffer containing the file contents, or NULL on error. 
\end{DoxyReturn}


Definition at line \mbox{\hyperlink{read__map_8c_source_l00033}{33}} of file \mbox{\hyperlink{read__map_8c_source}{read\+\_\+map.\+c}}.


\begin{DoxyCode}{0}
\DoxyCodeLine{00034\ \{}
\DoxyCodeLine{00035\ \ \ \ \ \textcolor{keywordtype}{int}\ \ \ \ \ file;}
\DoxyCodeLine{00036\ \ \ \ \ \textcolor{keywordtype}{int}\ \ \ \ \ bytes\_read;}
\DoxyCodeLine{00037\ \ \ \ \ \textcolor{keywordtype}{char}\ \ \ \ *map\_string;}
\DoxyCodeLine{00038\ }
\DoxyCodeLine{00039\ \ \ \ \ bytes\_read\ =\ \mbox{\hyperlink{read__map_8c_a973f5273453bacdf37c27ef24bdd540d}{get\_total\_bytes}}(filename);}
\DoxyCodeLine{00040\ \ \ \ \ \textcolor{keywordflow}{if}\ (!bytes\_read)}
\DoxyCodeLine{00041\ \ \ \ \ \ \ \ \ \mbox{\hyperlink{cub3D_8h_a968801b6df4daa98b46851157bfbacab}{print\_error}}(\mbox{\hyperlink{cub3D_8h_a4635f2163efe937e76598aff306d35d1}{EMPTY\_MAP}});}
\DoxyCodeLine{00042\ \ \ \ \ map\_string\ =\ (\textcolor{keywordtype}{char}\ *)malloc(\textcolor{keyword}{sizeof}(\textcolor{keywordtype}{char})\ *\ bytes\_read\ +\ 1);}
\DoxyCodeLine{00043\ \ \ \ \ \textcolor{keywordflow}{if}\ (!map\_string)}
\DoxyCodeLine{00044\ \ \ \ \ \ \ \ \ \textcolor{keywordflow}{return}\ (NULL);}
\DoxyCodeLine{00045\ \ \ \ \ file\ =\ open(filename,\ O\_RDONLY);}
\DoxyCodeLine{00046\ \ \ \ \ \textcolor{keywordflow}{if}\ (file\ ==\ -\/1)}
\DoxyCodeLine{00047\ \ \ \ \ \ \ \ \ \mbox{\hyperlink{cub3D_8h_ad12f49185b9cfb483605a617c9484f25}{cleanup\_and\_exit}}(errno,\ 0,\ map\_string);}
\DoxyCodeLine{00048\ \ \ \ \ \textcolor{keywordflow}{if}\ (read(file,\ map\_string,\ bytes\_read)\ ==\ -\/1)}
\DoxyCodeLine{00049\ \ \ \ \ \ \ \ \ \mbox{\hyperlink{cub3D_8h_ad12f49185b9cfb483605a617c9484f25}{cleanup\_and\_exit}}(errno,\ file,\ map\_string);}
\DoxyCodeLine{00050\ \ \ \ \ map\_string[bytes\_read]\ =\ \textcolor{charliteral}{'\(\backslash\)0'};}
\DoxyCodeLine{00051\ \ \ \ \ close(file);}
\DoxyCodeLine{00052\ \ \ \ \ \textcolor{keywordflow}{return}\ (map\_string);}
\DoxyCodeLine{00053\ \}}

\end{DoxyCode}
Here is the call graph for this function\+:
% FIG 23
Here is the caller graph for this function\+:
% FIG 24
