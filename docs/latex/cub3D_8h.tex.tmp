\hypertarget{cub3D_8h}{}\doxysection{/home/ssergiu/projects/cub3d/include/cub3D.h File Reference}
\label{cub3D_8h}\index{/home/ssergiu/projects/cub3d/include/cub3D.h@{/home/ssergiu/projects/cub3d/include/cub3D.h}}
{\ttfamily \#include $<$stdio.\+h$>$}\newline
{\ttfamily \#include $<$errno.\+h$>$}\newline
{\ttfamily \#include $<$fcntl.\+h$>$}\newline
{\ttfamily \#include $<$string.\+h$>$}\newline
{\ttfamily \#include \char`\"{}libft/libft.\+h\char`\"{}}\newline
{\ttfamily \#include \char`\"{}../external/\+MLX42/include/\+MLX42/\+MLX42.\+h\char`\"{}}\newline
Include dependency graph for cub3\+D.\+h\+:
% FIG 0
This graph shows which files directly or indirectly include this file\+:
% FIG 1
\doxysubsection*{Classes}
\begin{DoxyCompactItemize}
\item 
struct \mbox{\hyperlink{structs__map__data}{s\+\_\+map\+\_\+data}}
\end{DoxyCompactItemize}
\doxysubsection*{Macros}
\begin{DoxyCompactItemize}
\item 
\#define \mbox{\hyperlink{cub3D_8h_aa8cecfc5c5c054d2875c03e77b7be15d}{TRUE}}~1
\item 
\#define \mbox{\hyperlink{cub3D_8h_aa93f0eb578d23995850d61f7d61c55c1}{FALSE}}~0
\item 
\#define \mbox{\hyperlink{cub3D_8h_a2706e5298e357ffb64b22c7e7fc1b3e9}{TILE}}~64
\item 
\#define \mbox{\hyperlink{cub3D_8h_a4635f2163efe937e76598aff306d35d1}{EMPTY\+\_\+\+MAP}}~254
\item 
\#define \mbox{\hyperlink{cub3D_8h_a8e0ad1ba0b05ba2af8e7fcd8f02c12ed}{BAD\+\_\+\+MAP\+\_\+\+FILE}}~255
\end{DoxyCompactItemize}
\doxysubsection*{Typedefs}
\begin{DoxyCompactItemize}
\item 
typedef struct \mbox{\hyperlink{structs__map__data}{s\+\_\+map\+\_\+data}} \mbox{\hyperlink{cub3D_8h_a2e2d5bf45b85bbcd3d47c64673725ab1}{t\+\_\+map\+\_\+data}}
\end{DoxyCompactItemize}
\doxysubsection*{Functions}
\begin{DoxyCompactItemize}
\item 
void \mbox{\hyperlink{cub3D_8h_a1dd6a7f325ca5e8aafa0fe462209b4bb}{draw\+\_\+map}} (struct \mbox{\hyperlink{structs__map__data}{s\+\_\+map\+\_\+data}} $\ast$data)
\item 
void \mbox{\hyperlink{cub3D_8h_a3efc0a465ac3693c6748963564a7dc0e}{init\+\_\+map\+\_\+data}} (struct \mbox{\hyperlink{structs__map__data}{s\+\_\+map\+\_\+data}} $\ast$$\ast$data, char $\ast$map\+\_\+file)
\begin{DoxyCompactList}\small\item\em Initializes map data. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{cub3D_8h_ac0e0d1411c5e6e51f7bb4b854217d40c}{destroy\+\_\+map\+\_\+data}} (struct \mbox{\hyperlink{structs__map__data}{s\+\_\+map\+\_\+data}} $\ast$$\ast$data)
\begin{DoxyCompactList}\small\item\em Destroys map data. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{cub3D_8h_af5c60b16fc036394aa182bd09cc16e5d}{print\+\_\+error}} (int error\+\_\+number)
\begin{DoxyCompactList}\small\item\em Prints an error message to the standard error output. \end{DoxyCompactList}\item 
int \mbox{\hyperlink{cub3D_8h_af11ad10198633d526882d9ebabf21042}{handle\+\_\+error}} (int error\+\_\+number)
\begin{DoxyCompactList}\small\item\em Handles the given error number, prints an error message to the standard error output, and exits the program. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{cub3D_8h_a7584d3cba7faed7cee5d3d2120f43e83}{cleanup\+\_\+and\+\_\+exit}} (int error\+\_\+number, int file, char $\ast$buffer)
\begin{DoxyCompactList}\small\item\em Frees any allocated memory and exits the program with the given error number. \end{DoxyCompactList}\item 
int \mbox{\hyperlink{cub3D_8h_a973f5273453bacdf37c27ef24bdd540d}{get\+\_\+total\+\_\+bytes}} (char $\ast$filename)
\begin{DoxyCompactList}\small\item\em Returns the total number of bytes in the file with the given filename. \end{DoxyCompactList}\item 
char $\ast$ \mbox{\hyperlink{cub3D_8h_a953ff0338bfa5e5863fc98056025e303}{read\+\_\+map}} (char $\ast$filename)
\begin{DoxyCompactList}\small\item\em Reads the contents of the file with the given name into a dynamically allocated buffer. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{cub3D_8h_a73200bd9a8be60a2e2f5eb2528293a8f}{free\+\_\+split}} (char $\ast$$\ast$str)
\begin{DoxyCompactList}\small\item\em Frees memory allocated for a string array. \end{DoxyCompactList}\item 
int \mbox{\hyperlink{cub3D_8h_ad624da07f82233cb9bf10960641f9fec}{get\+\_\+height}} (char $\ast$$\ast$map)
\begin{DoxyCompactList}\small\item\em Gets the height of a map. \end{DoxyCompactList}\end{DoxyCompactItemize}


\doxysubsection{Macro Definition Documentation}
\mbox{\Hypertarget{cub3D_8h_a8e0ad1ba0b05ba2af8e7fcd8f02c12ed}\label{cub3D_8h_a8e0ad1ba0b05ba2af8e7fcd8f02c12ed}} 
\index{cub3D.h@{cub3D.h}!BAD\_MAP\_FILE@{BAD\_MAP\_FILE}}
\index{BAD\_MAP\_FILE@{BAD\_MAP\_FILE}!cub3D.h@{cub3D.h}}
\doxysubsubsection{\texorpdfstring{BAD\_MAP\_FILE}{BAD\_MAP\_FILE}}
{\footnotesize\ttfamily \#define BAD\+\_\+\+MAP\+\_\+\+FILE~255}



Definition at line \mbox{\hyperlink{cub3D_8h_source_l00015}{15}} of file \mbox{\hyperlink{cub3D_8h_source}{cub3\+D.\+h}}.

\mbox{\Hypertarget{cub3D_8h_a4635f2163efe937e76598aff306d35d1}\label{cub3D_8h_a4635f2163efe937e76598aff306d35d1}} 
\index{cub3D.h@{cub3D.h}!EMPTY\_MAP@{EMPTY\_MAP}}
\index{EMPTY\_MAP@{EMPTY\_MAP}!cub3D.h@{cub3D.h}}
\doxysubsubsection{\texorpdfstring{EMPTY\_MAP}{EMPTY\_MAP}}
{\footnotesize\ttfamily \#define EMPTY\+\_\+\+MAP~254}



Definition at line \mbox{\hyperlink{cub3D_8h_source_l00014}{14}} of file \mbox{\hyperlink{cub3D_8h_source}{cub3\+D.\+h}}.

\mbox{\Hypertarget{cub3D_8h_aa93f0eb578d23995850d61f7d61c55c1}\label{cub3D_8h_aa93f0eb578d23995850d61f7d61c55c1}} 
\index{cub3D.h@{cub3D.h}!FALSE@{FALSE}}
\index{FALSE@{FALSE}!cub3D.h@{cub3D.h}}
\doxysubsubsection{\texorpdfstring{FALSE}{FALSE}}
{\footnotesize\ttfamily \#define FALSE~0}



Definition at line \mbox{\hyperlink{cub3D_8h_source_l00012}{12}} of file \mbox{\hyperlink{cub3D_8h_source}{cub3\+D.\+h}}.

\mbox{\Hypertarget{cub3D_8h_a2706e5298e357ffb64b22c7e7fc1b3e9}\label{cub3D_8h_a2706e5298e357ffb64b22c7e7fc1b3e9}} 
\index{cub3D.h@{cub3D.h}!TILE@{TILE}}
\index{TILE@{TILE}!cub3D.h@{cub3D.h}}
\doxysubsubsection{\texorpdfstring{TILE}{TILE}}
{\footnotesize\ttfamily \#define TILE~64}



Definition at line \mbox{\hyperlink{cub3D_8h_source_l00013}{13}} of file \mbox{\hyperlink{cub3D_8h_source}{cub3\+D.\+h}}.

\mbox{\Hypertarget{cub3D_8h_aa8cecfc5c5c054d2875c03e77b7be15d}\label{cub3D_8h_aa8cecfc5c5c054d2875c03e77b7be15d}} 
\index{cub3D.h@{cub3D.h}!TRUE@{TRUE}}
\index{TRUE@{TRUE}!cub3D.h@{cub3D.h}}
\doxysubsubsection{\texorpdfstring{TRUE}{TRUE}}
{\footnotesize\ttfamily \#define TRUE~1}



Definition at line \mbox{\hyperlink{cub3D_8h_source_l00011}{11}} of file \mbox{\hyperlink{cub3D_8h_source}{cub3\+D.\+h}}.



\doxysubsection{Typedef Documentation}
\mbox{\Hypertarget{cub3D_8h_a2e2d5bf45b85bbcd3d47c64673725ab1}\label{cub3D_8h_a2e2d5bf45b85bbcd3d47c64673725ab1}} 
\index{cub3D.h@{cub3D.h}!t\_map\_data@{t\_map\_data}}
\index{t\_map\_data@{t\_map\_data}!cub3D.h@{cub3D.h}}
\doxysubsubsection{\texorpdfstring{t\_map\_data}{t\_map\_data}}
{\footnotesize\ttfamily typedef struct \mbox{\hyperlink{structs__map__data}{s\+\_\+map\+\_\+data}} \mbox{\hyperlink{cub3D_8h_a2e2d5bf45b85bbcd3d47c64673725ab1}{t\+\_\+map\+\_\+data}}}



Definition at line \mbox{\hyperlink{cub3D_8h_source_l00017}{17}} of file \mbox{\hyperlink{cub3D_8h_source}{cub3\+D.\+h}}.



\doxysubsection{Function Documentation}
\mbox{\Hypertarget{cub3D_8h_a7584d3cba7faed7cee5d3d2120f43e83}\label{cub3D_8h_a7584d3cba7faed7cee5d3d2120f43e83}} 
\index{cub3D.h@{cub3D.h}!cleanup\_and\_exit@{cleanup\_and\_exit}}
\index{cleanup\_and\_exit@{cleanup\_and\_exit}!cub3D.h@{cub3D.h}}
\doxysubsubsection{\texorpdfstring{cleanup\_and\_exit()}{cleanup\_and\_exit()}}
{\footnotesize\ttfamily void cleanup\+\_\+and\+\_\+exit (\begin{DoxyParamCaption}\item[{int}]{error\+\_\+number,  }\item[{int}]{file,  }\item[{char $\ast$}]{buffer }\end{DoxyParamCaption})}



Frees any allocated memory and exits the program with the given error number. 


\begin{DoxyParams}{Parameters}
{\em error\+\_\+number} & The error number to print. \\
\hline
{\em file} & The file descriptor to close. \\
\hline
{\em buffer} & The buffer to free.\\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
void. 
\end{DoxyReturn}


Definition at line \mbox{\hyperlink{error__handling_8c_source_l00027}{27}} of file \mbox{\hyperlink{error__handling_8c_source}{error\+\_\+handling.\+c}}.


\begin{DoxyCode}{0}
\DoxyCodeLine{00028\ \{}
\DoxyCodeLine{00029\ \ \ \ \ \textcolor{keywordflow}{if}\ (file\ >\ 0)}
\DoxyCodeLine{00030\ \ \ \ \ \ \ \ \ close(file);}
\DoxyCodeLine{00031\ \ \ \ \ \textcolor{keywordflow}{if}\ (buffer\ !=\ NULL)}
\DoxyCodeLine{00032\ \ \ \ \ \ \ \ \ free(buffer);}
\DoxyCodeLine{00033\ \ \ \ \ \mbox{\hyperlink{error__handling_8c_af5c60b16fc036394aa182bd09cc16e5d}{print\_error}}(error\_number);}
\DoxyCodeLine{00034\ \ \ \ \ exit(error\_number);}
\DoxyCodeLine{00035\ \}}

\end{DoxyCode}
Here is the call graph for this function\+:
% FIG 2
Here is the caller graph for this function\+:
% FIG 3
\mbox{\Hypertarget{cub3D_8h_ac0e0d1411c5e6e51f7bb4b854217d40c}\label{cub3D_8h_ac0e0d1411c5e6e51f7bb4b854217d40c}} 
\index{cub3D.h@{cub3D.h}!destroy\_map\_data@{destroy\_map\_data}}
\index{destroy\_map\_data@{destroy\_map\_data}!cub3D.h@{cub3D.h}}
\doxysubsubsection{\texorpdfstring{destroy\_map\_data()}{destroy\_map\_data()}}
{\footnotesize\ttfamily void destroy\+\_\+map\+\_\+data (\begin{DoxyParamCaption}\item[{struct \mbox{\hyperlink{structs__map__data}{s\+\_\+map\+\_\+data}} $\ast$$\ast$}]{data }\end{DoxyParamCaption})}



Destroys map data. 

This function frees memory allocated for a map\+\_\+data struct and its components.


\begin{DoxyParams}{Parameters}
{\em data} & A pointer to the map\+\_\+data struct to be destroyed. \\
\hline
\end{DoxyParams}


Definition at line \mbox{\hyperlink{draw__map__utils_8c_source_l00043}{43}} of file \mbox{\hyperlink{draw__map__utils_8c_source}{draw\+\_\+map\+\_\+utils.\+c}}.


\begin{DoxyCode}{0}
\DoxyCodeLine{00044\ \{}
\DoxyCodeLine{00045\ \ \ \ \ free((*data)-\/>map\_string);}
\DoxyCodeLine{00046\ \ \ \ \ \textcolor{keywordflow}{if}\ ((*data)-\/>map\_string)}
\DoxyCodeLine{00047\ \ \ \ \ \ \ \ \ \textcolor{keywordflow}{if}\ ((*data)-\/>map)}
\DoxyCodeLine{00048\ \ \ \ \ \ \ \ \ \ \ \ \ \mbox{\hyperlink{draw__map__utils_8c_a73200bd9a8be60a2e2f5eb2528293a8f}{free\_split}}((*data)-\/>map);}
\DoxyCodeLine{00049\ \ \ \ \ free((*data));}
\DoxyCodeLine{00050\ \}}

\end{DoxyCode}
Here is the call graph for this function\+:
% FIG 4
Here is the caller graph for this function\+:
% FIG 5
\mbox{\Hypertarget{cub3D_8h_a1dd6a7f325ca5e8aafa0fe462209b4bb}\label{cub3D_8h_a1dd6a7f325ca5e8aafa0fe462209b4bb}} 
\index{cub3D.h@{cub3D.h}!draw\_map@{draw\_map}}
\index{draw\_map@{draw\_map}!cub3D.h@{cub3D.h}}
\doxysubsubsection{\texorpdfstring{draw\_map()}{draw\_map()}}
{\footnotesize\ttfamily void draw\+\_\+map (\begin{DoxyParamCaption}\item[{struct \mbox{\hyperlink{structs__map__data}{s\+\_\+map\+\_\+data}} $\ast$}]{data }\end{DoxyParamCaption})}



Definition at line \mbox{\hyperlink{draw__map_8c_source_l00097}{97}} of file \mbox{\hyperlink{draw__map_8c_source}{draw\+\_\+map.\+c}}.


\begin{DoxyCode}{0}
\DoxyCodeLine{00098\ \{}
\DoxyCodeLine{00099\ \ \ \ \ mlx\_t*\ \ \ \ \ \ \ \ \ \ mlx;}
\DoxyCodeLine{00100\ \ \ \ \ mlx\_image\_t*\ \ \ \ image;}
\DoxyCodeLine{00101\ }
\DoxyCodeLine{00102\ \ \ \ \ \textcolor{keywordflow}{if}\ (!(mlx\ =\ mlx\_init(data-\/>\mbox{\hyperlink{structs__map__data_a6c935e0fd9d156d75d36287be039e256}{width}},\ data-\/>\mbox{\hyperlink{structs__map__data_a3dc97c8f3b6eaa17bf4e5fe4467d9b98}{height}},\ \textcolor{stringliteral}{"{}MLX42"{}},\ \textcolor{keyword}{true})))}
\DoxyCodeLine{00103\ \ \ \ \ \{}
\DoxyCodeLine{00104\ \ \ \ \ \ \ \ \ \mbox{\hyperlink{libft_8h_acefce9ac519f8f8b7d3fde33dbafe469}{ft\_putstr\_fd}}((\textcolor{keywordtype}{char}\ *)mlx\_strerror(mlx\_errno),\ 2);}
\DoxyCodeLine{00105\ \ \ \ \ \}}
\DoxyCodeLine{00106\ \ \ \ \ \textcolor{keywordflow}{if}\ (!(image\ =\ mlx\_new\_image(mlx,\ data-\/>\mbox{\hyperlink{structs__map__data_a6c935e0fd9d156d75d36287be039e256}{width}},\ data-\/>\mbox{\hyperlink{structs__map__data_a3dc97c8f3b6eaa17bf4e5fe4467d9b98}{height}})))}
\DoxyCodeLine{00107\ \ \ \ \ \{}
\DoxyCodeLine{00108\ \ \ \ \ \ \ \ \ mlx\_close\_window(mlx);}
\DoxyCodeLine{00109\ \ \ \ \ \ \ \ \ \mbox{\hyperlink{libft_8h_acefce9ac519f8f8b7d3fde33dbafe469}{ft\_putstr\_fd}}((\textcolor{keywordtype}{char}\ *)mlx\_strerror(mlx\_errno),\ 2);}
\DoxyCodeLine{00110\ \ \ \ \ \}}
\DoxyCodeLine{00111\ \ \ \ \ \textcolor{keywordflow}{if}\ (mlx\_image\_to\_window(mlx,\ image,\ 0,\ 0)\ ==\ -\/1)}
\DoxyCodeLine{00112\ \ \ \ \ \{}
\DoxyCodeLine{00113\ \ \ \ \ \ \ \ \ mlx\_close\_window(mlx);}
\DoxyCodeLine{00114\ \ \ \ \ \ \ \ \ \mbox{\hyperlink{libft_8h_acefce9ac519f8f8b7d3fde33dbafe469}{ft\_putstr\_fd}}((\textcolor{keywordtype}{char}\ *)mlx\_strerror(mlx\_errno),\ 2);}
\DoxyCodeLine{00115\ \ \ \ \ \}}
\DoxyCodeLine{00116\ \ \ \ \ memset(image-\/>pixels,\ 255,\ data-\/>\mbox{\hyperlink{structs__map__data_a6c935e0fd9d156d75d36287be039e256}{width}}\ *\ data-\/>\mbox{\hyperlink{structs__map__data_a3dc97c8f3b6eaa17bf4e5fe4467d9b98}{height}}\ *\ 4);}
\DoxyCodeLine{00117\ \ \ \ \ \textcolor{comment}{//draw\ grid}}
\DoxyCodeLine{00118\ \ \ \ \ \mbox{\hyperlink{draw__map_8c_a0784778679c1d1e56629e11ff8e33c16}{draw\_grid}}(data,\ image);}
\DoxyCodeLine{00119\ \ \ \ \ \textcolor{comment}{//draw\ walls}}
\DoxyCodeLine{00120\ \ \ \ \ \mbox{\hyperlink{draw__map_8c_a130aac34cf392c1b07ed012b30469991}{draw\_walls}}(mlx,\ data);}
\DoxyCodeLine{00121\ \ \ \ \ \textcolor{comment}{//draw\ player}}
\DoxyCodeLine{00122\ \ \ \ \ \mbox{\hyperlink{draw__map_8c_a4870a2eab5a5ceb34b6085f67f1e2998}{draw\_player}}(mlx);}
\DoxyCodeLine{00123\ \ \ \ \ mlx\_loop\_hook(mlx,\ \mbox{\hyperlink{draw__map_8c_a4b7144f73d9e8c25ca55c890584b5c0e}{ft\_hook}},\ mlx);}
\DoxyCodeLine{00124\ \ \ \ \ mlx\_loop(mlx);}
\DoxyCodeLine{00125\ \ \ \ \ mlx\_terminate(mlx);}
\DoxyCodeLine{00126\ \}}

\end{DoxyCode}
Here is the call graph for this function\+:
% FIG 6
\mbox{\Hypertarget{cub3D_8h_a73200bd9a8be60a2e2f5eb2528293a8f}\label{cub3D_8h_a73200bd9a8be60a2e2f5eb2528293a8f}} 
\index{cub3D.h@{cub3D.h}!free\_split@{free\_split}}
\index{free\_split@{free\_split}!cub3D.h@{cub3D.h}}
\doxysubsubsection{\texorpdfstring{free\_split()}{free\_split()}}
{\footnotesize\ttfamily void free\+\_\+split (\begin{DoxyParamCaption}\item[{char $\ast$$\ast$}]{str }\end{DoxyParamCaption})}



Frees memory allocated for a string array. 

This function frees the memory that was allocated for a string array.


\begin{DoxyParams}{Parameters}
{\em str} & The string array to be freed. \\
\hline
\end{DoxyParams}


Definition at line \mbox{\hyperlink{draw__map__utils_8c_source_l00004}{4}} of file \mbox{\hyperlink{draw__map__utils_8c_source}{draw\+\_\+map\+\_\+utils.\+c}}.


\begin{DoxyCode}{0}
\DoxyCodeLine{00005\ \{}
\DoxyCodeLine{00006\ \ \ \ \ \textcolor{keywordtype}{int}\ i;\ \ }
\DoxyCodeLine{00007\ }
\DoxyCodeLine{00008\ \ \ \ \ i\ =\ -\/1;}
\DoxyCodeLine{00009\ \ \ \ \ \textcolor{keywordflow}{while}\ (str[++i])}
\DoxyCodeLine{00010\ \ \ \ \ \ \ \ \ free(str[i]);}
\DoxyCodeLine{00011\ \ \ \ \ free(str);}
\DoxyCodeLine{00012\ \}}

\end{DoxyCode}
Here is the caller graph for this function\+:
% FIG 7
\mbox{\Hypertarget{cub3D_8h_ad624da07f82233cb9bf10960641f9fec}\label{cub3D_8h_ad624da07f82233cb9bf10960641f9fec}} 
\index{cub3D.h@{cub3D.h}!get\_height@{get\_height}}
\index{get\_height@{get\_height}!cub3D.h@{cub3D.h}}
\doxysubsubsection{\texorpdfstring{get\_height()}{get\_height()}}
{\footnotesize\ttfamily int get\+\_\+height (\begin{DoxyParamCaption}\item[{char $\ast$$\ast$}]{map }\end{DoxyParamCaption})}



Gets the height of a map. 

This function takes a 2D string array representing a map and returns its height.


\begin{DoxyParams}{Parameters}
{\em map} & The 2D string array representing the map. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
The height of the map. 
\end{DoxyReturn}


Definition at line \mbox{\hyperlink{draw__map__utils_8c_source_l00014}{14}} of file \mbox{\hyperlink{draw__map__utils_8c_source}{draw\+\_\+map\+\_\+utils.\+c}}.


\begin{DoxyCode}{0}
\DoxyCodeLine{00015\ \{}
\DoxyCodeLine{00016\ \ \ \ \ \textcolor{keywordtype}{int}\ i;}
\DoxyCodeLine{00017\ }
\DoxyCodeLine{00018\ \ \ \ \ i\ =\ 0;}
\DoxyCodeLine{00019\ \ \ \ \ \textcolor{keywordflow}{while}\ (map[i])}
\DoxyCodeLine{00020\ \ \ \ \ \ \ \ \ i++;}
\DoxyCodeLine{00021\ \ \ \ \ \textcolor{keywordflow}{return}\ (i);}
\DoxyCodeLine{00022\ \}}

\end{DoxyCode}
Here is the caller graph for this function\+:
% FIG 8
\mbox{\Hypertarget{cub3D_8h_a973f5273453bacdf37c27ef24bdd540d}\label{cub3D_8h_a973f5273453bacdf37c27ef24bdd540d}} 
\index{cub3D.h@{cub3D.h}!get\_total\_bytes@{get\_total\_bytes}}
\index{get\_total\_bytes@{get\_total\_bytes}!cub3D.h@{cub3D.h}}
\doxysubsubsection{\texorpdfstring{get\_total\_bytes()}{get\_total\_bytes()}}
{\footnotesize\ttfamily int get\+\_\+total\+\_\+bytes (\begin{DoxyParamCaption}\item[{char $\ast$}]{filename }\end{DoxyParamCaption})}



Returns the total number of bytes in the file with the given filename. 


\begin{DoxyParams}{Parameters}
{\em filename} & The name of the file.\\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
The total number of bytes in the file. 
\end{DoxyReturn}


Definition at line \mbox{\hyperlink{read__map_8c_source_l00004}{4}} of file \mbox{\hyperlink{read__map_8c_source}{read\+\_\+map.\+c}}.


\begin{DoxyCode}{0}
\DoxyCodeLine{00005\ \{}
\DoxyCodeLine{00006\ \ \ \ \ \textcolor{keywordtype}{int}\ \ \ \ \ file;}
\DoxyCodeLine{00007\ \ \ \ \ \textcolor{keywordtype}{char}\ \ \ \ *buffer;}
\DoxyCodeLine{00008\ \ \ \ \ \textcolor{keywordtype}{int}\ \ \ \ \ total\_bytes;}
\DoxyCodeLine{00009\ \ \ \ \ \textcolor{keywordtype}{int}\ \ \ \ \ bytes\_read;}
\DoxyCodeLine{00010\ }
\DoxyCodeLine{00011\ \ \ \ \ file\ =\ open(filename,\ O\_RDONLY);}
\DoxyCodeLine{00012\ \ \ \ \ \textcolor{keywordflow}{if}\ (file\ ==\ -\/1)}
\DoxyCodeLine{00013\ \ \ \ \ \ \ \ \ \mbox{\hyperlink{cub3D_8h_af11ad10198633d526882d9ebabf21042}{handle\_error}}(errno);}
\DoxyCodeLine{00014\ \ \ \ \ buffer\ =\ (\textcolor{keywordtype}{char}\ *)malloc(\textcolor{keyword}{sizeof}(\textcolor{keywordtype}{char})\ *\ 100);}
\DoxyCodeLine{00015\ \ \ \ \ \textcolor{keywordflow}{if}\ (!buffer)}
\DoxyCodeLine{00016\ \ \ \ \ \ \ \ \ \mbox{\hyperlink{cub3D_8h_a7584d3cba7faed7cee5d3d2120f43e83}{cleanup\_and\_exit}}(errno,\ file,\ NULL);}
\DoxyCodeLine{00017\ \ \ \ \ bytes\_read\ =\ read(file,\ buffer,\ 100);}
\DoxyCodeLine{00018\ \ \ \ \ \textcolor{keywordflow}{if}\ (bytes\_read\ ==\ -\/1)}
\DoxyCodeLine{00019\ \ \ \ \ \ \ \ \ \mbox{\hyperlink{cub3D_8h_a7584d3cba7faed7cee5d3d2120f43e83}{cleanup\_and\_exit}}(errno,\ file,\ buffer);}
\DoxyCodeLine{00020\ \ \ \ \ total\_bytes\ =\ bytes\_read;}
\DoxyCodeLine{00021\ \ \ \ \ \textcolor{keywordflow}{while}\ (bytes\_read\ >\ 0)}
\DoxyCodeLine{00022\ \ \ \ \ \{}
\DoxyCodeLine{00023\ \ \ \ \ \ \ \ \ bytes\_read\ =\ read(file,\ buffer,\ 100);}
\DoxyCodeLine{00024\ \ \ \ \ \ \ \ \ \textcolor{keywordflow}{if}\ (bytes\_read\ ==\ -\/1)}
\DoxyCodeLine{00025\ \ \ \ \ \ \ \ \ \ \ \ \ \mbox{\hyperlink{cub3D_8h_a7584d3cba7faed7cee5d3d2120f43e83}{cleanup\_and\_exit}}(errno,\ file,\ buffer);}
\DoxyCodeLine{00026\ \ \ \ \ \ \ \ \ total\_bytes\ +=\ bytes\_read;}
\DoxyCodeLine{00027\ \ \ \ \ \}}
\DoxyCodeLine{00028\ \ \ \ \ close(file);}
\DoxyCodeLine{00029\ \ \ \ \ free(buffer);}
\DoxyCodeLine{00030\ \ \ \ \ \textcolor{keywordflow}{return}\ (total\_bytes);}
\DoxyCodeLine{00031\ \}}

\end{DoxyCode}
Here is the call graph for this function\+:
% FIG 9
Here is the caller graph for this function\+:
% FIG 10
\mbox{\Hypertarget{cub3D_8h_af11ad10198633d526882d9ebabf21042}\label{cub3D_8h_af11ad10198633d526882d9ebabf21042}} 
\index{cub3D.h@{cub3D.h}!handle\_error@{handle\_error}}
\index{handle\_error@{handle\_error}!cub3D.h@{cub3D.h}}
\doxysubsubsection{\texorpdfstring{handle\_error()}{handle\_error()}}
{\footnotesize\ttfamily int handle\+\_\+error (\begin{DoxyParamCaption}\item[{int}]{error\+\_\+number }\end{DoxyParamCaption})}



Handles the given error number, prints an error message to the standard error output, and exits the program. 


\begin{DoxyParams}{Parameters}
{\em error\+\_\+number} & The error number to handle.\\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
void. 
\end{DoxyReturn}


Definition at line \mbox{\hyperlink{error__handling_8c_source_l00011}{11}} of file \mbox{\hyperlink{error__handling_8c_source}{error\+\_\+handling.\+c}}.


\begin{DoxyCode}{0}
\DoxyCodeLine{00012\ \{}
\DoxyCodeLine{00013\ \ \ \ \ \textcolor{keywordflow}{if}\ (error\_number\ ==\ \mbox{\hyperlink{cub3D_8h_a4635f2163efe937e76598aff306d35d1}{EMPTY\_MAP}})}
\DoxyCodeLine{00014\ \ \ \ \ \{}
\DoxyCodeLine{00015\ \ \ \ \ \ \ \ \ write(2,\ \textcolor{stringliteral}{"{}Error:\ Empty\ map\(\backslash\)n"{}},\ 17);}
\DoxyCodeLine{00016\ \ \ \ \ \ \ \ \ exit(error\_number);}
\DoxyCodeLine{00017\ \ \ \ \ \}}
\DoxyCodeLine{00018\ \ \ \ \ \textcolor{keywordflow}{if}\ (error\_number\ ==\ \mbox{\hyperlink{cub3D_8h_a8e0ad1ba0b05ba2af8e7fcd8f02c12ed}{BAD\_MAP\_FILE}})}
\DoxyCodeLine{00019\ \ \ \ \ \{}
\DoxyCodeLine{00020\ \ \ \ \ \ \ \ \ write(2,\ \textcolor{stringliteral}{"{}Error:\ Bad\ map\ file\(\backslash\)n"{}},\ 20);}
\DoxyCodeLine{00021\ \ \ \ \ \ \ \ \ exit(error\_number);}
\DoxyCodeLine{00022\ \ \ \ \ \}}
\DoxyCodeLine{00023\ \ \ \ \ \mbox{\hyperlink{error__handling_8c_af5c60b16fc036394aa182bd09cc16e5d}{print\_error}}(error\_number);}
\DoxyCodeLine{00024\ \ \ \ \ exit(error\_number);}
\DoxyCodeLine{00025\ \}}

\end{DoxyCode}
Here is the call graph for this function\+:
% FIG 11
Here is the caller graph for this function\+:
% FIG 12
\mbox{\Hypertarget{cub3D_8h_a3efc0a465ac3693c6748963564a7dc0e}\label{cub3D_8h_a3efc0a465ac3693c6748963564a7dc0e}} 
\index{cub3D.h@{cub3D.h}!init\_map\_data@{init\_map\_data}}
\index{init\_map\_data@{init\_map\_data}!cub3D.h@{cub3D.h}}
\doxysubsubsection{\texorpdfstring{init\_map\_data()}{init\_map\_data()}}
{\footnotesize\ttfamily void init\+\_\+map\+\_\+data (\begin{DoxyParamCaption}\item[{struct \mbox{\hyperlink{structs__map__data}{s\+\_\+map\+\_\+data}} $\ast$$\ast$}]{data,  }\item[{char $\ast$}]{map\+\_\+file }\end{DoxyParamCaption})}



Initializes map data. 

This function initializes a map\+\_\+data struct and sets its map\+\_\+string, width, and height values.


\begin{DoxyParams}{Parameters}
{\em data} & A pointer to the map\+\_\+data struct to be initialized. \\
\hline
{\em map\+\_\+file} & The file path of the map file to be read. \\
\hline
\end{DoxyParams}


Definition at line \mbox{\hyperlink{draw__map__utils_8c_source_l00024}{24}} of file \mbox{\hyperlink{draw__map__utils_8c_source}{draw\+\_\+map\+\_\+utils.\+c}}.


\begin{DoxyCode}{0}
\DoxyCodeLine{00025\ \{}
\DoxyCodeLine{00026\ \ \ \ \ \textcolor{keywordtype}{char}\ \ \ \ *map;}
\DoxyCodeLine{00027\ }
\DoxyCodeLine{00028\ \ \ \ \ map\ =\ \mbox{\hyperlink{cub3D_8h_a953ff0338bfa5e5863fc98056025e303}{read\_map}}(map\_file);}
\DoxyCodeLine{00029\ \ \ \ \ (*data)\ =\ malloc(\textcolor{keyword}{sizeof}(\textcolor{keyword}{struct}\ \mbox{\hyperlink{structs__map__data}{s\_map\_data}}));}
\DoxyCodeLine{00030\ \ \ \ \ \textcolor{keywordflow}{if}\ (!(*data))}
\DoxyCodeLine{00031\ \ \ \ \ \ \ \ \ \mbox{\hyperlink{cub3D_8h_af11ad10198633d526882d9ebabf21042}{handle\_error}}(errno);}
\DoxyCodeLine{00032\ \ \ \ \ (*data)-\/>map\_string\ =\ map;}
\DoxyCodeLine{00033\ \ \ \ \ \textcolor{keywordflow}{if}\ ((*data)-\/>map\_string\ ==\ NULL)}
\DoxyCodeLine{00034\ \ \ \ \ \ \ \ \ \mbox{\hyperlink{cub3D_8h_a7584d3cba7faed7cee5d3d2120f43e83}{cleanup\_and\_exit}}(errno,\ 0,\ NULL);}
\DoxyCodeLine{00035\ \ \ \ \ \textcolor{keywordflow}{if}\ ((*data)-\/>map\_string)}
\DoxyCodeLine{00036\ \ \ \ \ \{}
\DoxyCodeLine{00037\ \ \ \ \ \ \ \ \ (*data)-\/>map\ =\ \mbox{\hyperlink{libft_8h_aa65c9de65051c8c589286cf133c4a1f4}{ft\_split}}((*data)-\/>map\_string,\ \textcolor{charliteral}{'\(\backslash\)n'});}
\DoxyCodeLine{00038\ \ \ \ \ \ \ \ \ (*data)-\/>width\ =\ \mbox{\hyperlink{libft_8h_a828402378653640f545a4be2e00e92f9}{ft\_strlen}}((*data)-\/>map[0])\ *\ \mbox{\hyperlink{cub3D_8h_a2706e5298e357ffb64b22c7e7fc1b3e9}{TILE}};}
\DoxyCodeLine{00039\ \ \ \ \ \ \ \ \ (*data)-\/>height\ =\ \mbox{\hyperlink{draw__map__utils_8c_ad624da07f82233cb9bf10960641f9fec}{get\_height}}((*data)-\/>map)\ *\ \mbox{\hyperlink{cub3D_8h_a2706e5298e357ffb64b22c7e7fc1b3e9}{TILE}};}
\DoxyCodeLine{00040\ \ \ \ \ \}}
\DoxyCodeLine{00041\ \}}

\end{DoxyCode}
Here is the call graph for this function\+:
% FIG 13
Here is the caller graph for this function\+:
% FIG 14
\mbox{\Hypertarget{cub3D_8h_af5c60b16fc036394aa182bd09cc16e5d}\label{cub3D_8h_af5c60b16fc036394aa182bd09cc16e5d}} 
\index{cub3D.h@{cub3D.h}!print\_error@{print\_error}}
\index{print\_error@{print\_error}!cub3D.h@{cub3D.h}}
\doxysubsubsection{\texorpdfstring{print\_error()}{print\_error()}}
{\footnotesize\ttfamily void print\+\_\+error (\begin{DoxyParamCaption}\item[{int}]{error\+\_\+number }\end{DoxyParamCaption})}



Prints an error message to the standard error output. 


\begin{DoxyParams}{Parameters}
{\em error\+\_\+number} & The error number to print.\\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
void. 
\end{DoxyReturn}


Definition at line \mbox{\hyperlink{error__handling_8c_source_l00004}{4}} of file \mbox{\hyperlink{error__handling_8c_source}{error\+\_\+handling.\+c}}.


\begin{DoxyCode}{0}
\DoxyCodeLine{00005\ \{}
\DoxyCodeLine{00006\ \ \ \ \ write(2,\ \textcolor{stringliteral}{"{}Error:\ "{}},\ 7);}
\DoxyCodeLine{00007\ \ \ \ \ \mbox{\hyperlink{libft_8h_acefce9ac519f8f8b7d3fde33dbafe469}{ft\_putstr\_fd}}(strerror(error\_number),\ 2);}
\DoxyCodeLine{00008\ \ \ \ \ write(2,\ \textcolor{stringliteral}{"{}\(\backslash\)n"{}},\ 1);}
\DoxyCodeLine{00009\ \}}

\end{DoxyCode}
Here is the call graph for this function\+:
% FIG 15
Here is the caller graph for this function\+:
% FIG 16
\mbox{\Hypertarget{cub3D_8h_a953ff0338bfa5e5863fc98056025e303}\label{cub3D_8h_a953ff0338bfa5e5863fc98056025e303}} 
\index{cub3D.h@{cub3D.h}!read\_map@{read\_map}}
\index{read\_map@{read\_map}!cub3D.h@{cub3D.h}}
\doxysubsubsection{\texorpdfstring{read\_map()}{read\_map()}}
{\footnotesize\ttfamily char $\ast$ read\+\_\+map (\begin{DoxyParamCaption}\item[{char $\ast$}]{filename }\end{DoxyParamCaption})}



Reads the contents of the file with the given name into a dynamically allocated buffer. 


\begin{DoxyParams}{Parameters}
{\em file} & The name of the file.\\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
A pointer to the dynamically allocated buffer containing the file contents, or NULL on error. 
\end{DoxyReturn}


Definition at line \mbox{\hyperlink{read__map_8c_source_l00033}{33}} of file \mbox{\hyperlink{read__map_8c_source}{read\+\_\+map.\+c}}.


\begin{DoxyCode}{0}
\DoxyCodeLine{00034\ \{}
\DoxyCodeLine{00035\ \ \ \ \ \textcolor{keywordtype}{int}\ \ \ \ \ file;}
\DoxyCodeLine{00036\ \ \ \ \ \textcolor{keywordtype}{int}\ \ \ \ \ bytes\_read;}
\DoxyCodeLine{00037\ \ \ \ \ \textcolor{keywordtype}{char}\ \ \ \ *map;}
\DoxyCodeLine{00038\ }
\DoxyCodeLine{00039\ \ \ \ \ bytes\_read\ =\ \mbox{\hyperlink{read__map_8c_a973f5273453bacdf37c27ef24bdd540d}{get\_total\_bytes}}(filename);}
\DoxyCodeLine{00040\ \ \ \ \ \textcolor{keywordflow}{if}\ (!bytes\_read)}
\DoxyCodeLine{00041\ \ \ \ \ \ \ \ \ \mbox{\hyperlink{cub3D_8h_af11ad10198633d526882d9ebabf21042}{handle\_error}}(\mbox{\hyperlink{cub3D_8h_a4635f2163efe937e76598aff306d35d1}{EMPTY\_MAP}});}
\DoxyCodeLine{00042\ \ \ \ \ map\ =\ (\textcolor{keywordtype}{char}\ *)malloc(\textcolor{keyword}{sizeof}(\textcolor{keywordtype}{char})\ *\ bytes\_read\ +\ 1);}
\DoxyCodeLine{00043\ \ \ \ \ \textcolor{keywordflow}{if}\ (!map)}
\DoxyCodeLine{00044\ \ \ \ \ \ \ \ \ \textcolor{keywordflow}{return}\ (NULL);}
\DoxyCodeLine{00045\ \ \ \ \ file\ =\ open(filename,\ O\_RDONLY);}
\DoxyCodeLine{00046\ \ \ \ \ \textcolor{keywordflow}{if}\ (file\ ==\ -\/1)}
\DoxyCodeLine{00047\ \ \ \ \ \ \ \ \ \mbox{\hyperlink{cub3D_8h_a7584d3cba7faed7cee5d3d2120f43e83}{cleanup\_and\_exit}}(errno,\ 0,\ map);}
\DoxyCodeLine{00048\ \ \ \ \ \textcolor{keywordflow}{if}\ (read(file,\ map,\ bytes\_read)\ ==\ -\/1)}
\DoxyCodeLine{00049\ \ \ \ \ \ \ \ \ \mbox{\hyperlink{cub3D_8h_a7584d3cba7faed7cee5d3d2120f43e83}{cleanup\_and\_exit}}(errno,\ file,\ map);}
\DoxyCodeLine{00050\ \ \ \ \ map[bytes\_read]\ =\ \textcolor{charliteral}{'\(\backslash\)0'};}
\DoxyCodeLine{00051\ \ \ \ \ close(file);}
\DoxyCodeLine{00052\ \ \ \ \ \textcolor{keywordflow}{return}\ (map);}
\DoxyCodeLine{00053\ \}}

\end{DoxyCode}
Here is the call graph for this function\+:
% FIG 17
Here is the caller graph for this function\+:
% FIG 18
