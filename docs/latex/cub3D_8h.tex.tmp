\hypertarget{cub3D_8h}{}\doxysection{/home/ssergiu/projects/cub3d/include/cub3D.h File Reference}
\label{cub3D_8h}\index{/home/ssergiu/projects/cub3d/include/cub3D.h@{/home/ssergiu/projects/cub3d/include/cub3D.h}}
{\ttfamily \#include $<$stdio.\+h$>$}\newline
{\ttfamily \#include $<$errno.\+h$>$}\newline
{\ttfamily \#include $<$fcntl.\+h$>$}\newline
{\ttfamily \#include $<$string.\+h$>$}\newline
{\ttfamily \#include \char`\"{}libft/libft.\+h\char`\"{}}\newline
{\ttfamily \#include \char`\"{}../external/\+MLX42/include/\+MLX42/\+MLX42.\+h\char`\"{}}\newline
Include dependency graph for cub3\+D.\+h\+:
% FIG 0
This graph shows which files directly or indirectly include this file\+:
% FIG 1
\doxysubsection*{Classes}
\begin{DoxyCompactItemize}
\item 
struct \mbox{\hyperlink{structs__map__data}{s\+\_\+map\+\_\+data}}
\end{DoxyCompactItemize}
\doxysubsection*{Macros}
\begin{DoxyCompactItemize}
\item 
\#define \mbox{\hyperlink{cub3D_8h_aa8cecfc5c5c054d2875c03e77b7be15d}{TRUE}}~1
\item 
\#define \mbox{\hyperlink{cub3D_8h_aa93f0eb578d23995850d61f7d61c55c1}{FALSE}}~0
\end{DoxyCompactItemize}
\doxysubsection*{Typedefs}
\begin{DoxyCompactItemize}
\item 
typedef struct \mbox{\hyperlink{structs__map__data}{s\+\_\+map\+\_\+data}} \mbox{\hyperlink{cub3D_8h_a2e2d5bf45b85bbcd3d47c64673725ab1}{t\+\_\+map\+\_\+data}}
\end{DoxyCompactItemize}
\doxysubsection*{Functions}
\begin{DoxyCompactItemize}
\item 
void \mbox{\hyperlink{cub3D_8h_a1dd6a7f325ca5e8aafa0fe462209b4bb}{draw\+\_\+map}} (struct \mbox{\hyperlink{structs__map__data}{s\+\_\+map\+\_\+data}} $\ast$data)
\item 
int \mbox{\hyperlink{cub3D_8h_a287e1eb420c186ddb3ca11b0d5b6cab4}{filename\+\_\+is\+\_\+valid}} (char $\ast$filename)
\begin{DoxyCompactList}\small\item\em Checks if the given filename is valid and ends with \char`\"{}.\+cub\char`\"{}. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{cub3D_8h_a3efc0a465ac3693c6748963564a7dc0e}{init\+\_\+map\+\_\+data}} (struct \mbox{\hyperlink{structs__map__data}{s\+\_\+map\+\_\+data}} $\ast$$\ast$data, char $\ast$map\+\_\+file)
\begin{DoxyCompactList}\small\item\em Initializes map data. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{cub3D_8h_ac0e0d1411c5e6e51f7bb4b854217d40c}{destroy\+\_\+map\+\_\+data}} (struct \mbox{\hyperlink{structs__map__data}{s\+\_\+map\+\_\+data}} $\ast$$\ast$data)
\begin{DoxyCompactList}\small\item\em Destroys map data. \end{DoxyCompactList}\end{DoxyCompactItemize}


\doxysubsection{Macro Definition Documentation}
\mbox{\Hypertarget{cub3D_8h_aa93f0eb578d23995850d61f7d61c55c1}\label{cub3D_8h_aa93f0eb578d23995850d61f7d61c55c1}} 
\index{cub3D.h@{cub3D.h}!FALSE@{FALSE}}
\index{FALSE@{FALSE}!cub3D.h@{cub3D.h}}
\doxysubsubsection{\texorpdfstring{FALSE}{FALSE}}
{\footnotesize\ttfamily \#define FALSE~0}



Definition at line \mbox{\hyperlink{cub3D_8h_source_l00012}{12}} of file \mbox{\hyperlink{cub3D_8h_source}{cub3\+D.\+h}}.

\mbox{\Hypertarget{cub3D_8h_aa8cecfc5c5c054d2875c03e77b7be15d}\label{cub3D_8h_aa8cecfc5c5c054d2875c03e77b7be15d}} 
\index{cub3D.h@{cub3D.h}!TRUE@{TRUE}}
\index{TRUE@{TRUE}!cub3D.h@{cub3D.h}}
\doxysubsubsection{\texorpdfstring{TRUE}{TRUE}}
{\footnotesize\ttfamily \#define TRUE~1}



Definition at line \mbox{\hyperlink{cub3D_8h_source_l00011}{11}} of file \mbox{\hyperlink{cub3D_8h_source}{cub3\+D.\+h}}.



\doxysubsection{Typedef Documentation}
\mbox{\Hypertarget{cub3D_8h_a2e2d5bf45b85bbcd3d47c64673725ab1}\label{cub3D_8h_a2e2d5bf45b85bbcd3d47c64673725ab1}} 
\index{cub3D.h@{cub3D.h}!t\_map\_data@{t\_map\_data}}
\index{t\_map\_data@{t\_map\_data}!cub3D.h@{cub3D.h}}
\doxysubsubsection{\texorpdfstring{t\_map\_data}{t\_map\_data}}
{\footnotesize\ttfamily typedef struct \mbox{\hyperlink{structs__map__data}{s\+\_\+map\+\_\+data}} \mbox{\hyperlink{cub3D_8h_a2e2d5bf45b85bbcd3d47c64673725ab1}{t\+\_\+map\+\_\+data}}}



Definition at line \mbox{\hyperlink{cub3D_8h_source_l00014}{14}} of file \mbox{\hyperlink{cub3D_8h_source}{cub3\+D.\+h}}.



\doxysubsection{Function Documentation}
\mbox{\Hypertarget{cub3D_8h_ac0e0d1411c5e6e51f7bb4b854217d40c}\label{cub3D_8h_ac0e0d1411c5e6e51f7bb4b854217d40c}} 
\index{cub3D.h@{cub3D.h}!destroy\_map\_data@{destroy\_map\_data}}
\index{destroy\_map\_data@{destroy\_map\_data}!cub3D.h@{cub3D.h}}
\doxysubsubsection{\texorpdfstring{destroy\_map\_data()}{destroy\_map\_data()}}
{\footnotesize\ttfamily void destroy\+\_\+map\+\_\+data (\begin{DoxyParamCaption}\item[{struct \mbox{\hyperlink{structs__map__data}{s\+\_\+map\+\_\+data}} $\ast$$\ast$}]{data }\end{DoxyParamCaption})}



Destroys map data. 

This function frees memory allocated for a map\+\_\+data struct and its components.


\begin{DoxyParams}{Parameters}
{\em data} & A pointer to the map\+\_\+data struct to be destroyed. \\
\hline
\end{DoxyParams}


Definition at line \mbox{\hyperlink{draw__map__utils_8c_source_l00043}{43}} of file \mbox{\hyperlink{draw__map__utils_8c_source}{draw\+\_\+map\+\_\+utils.\+c}}.


\begin{DoxyCode}{0}
\DoxyCodeLine{00044\ \{}
\DoxyCodeLine{00045\ \ \ \ \ free((*data)-\/>map\_string);}
\DoxyCodeLine{00046\ \ \ \ \ \textcolor{keywordflow}{if}\ ((*data)-\/>map\_string)}
\DoxyCodeLine{00047\ \ \ \ \ \ \ \ \ \textcolor{keywordflow}{if}\ ((*data)-\/>map)}
\DoxyCodeLine{00048\ \ \ \ \ \ \ \ \ \ \ \ \ \mbox{\hyperlink{draw__map__utils_8c_a73200bd9a8be60a2e2f5eb2528293a8f}{free\_split}}((*data)-\/>map);}
\DoxyCodeLine{00049\ \ \ \ \ free((*data));}
\DoxyCodeLine{00050\ \}}

\end{DoxyCode}
Here is the call graph for this function\+:
% FIG 2
Here is the caller graph for this function\+:
% FIG 3
\mbox{\Hypertarget{cub3D_8h_a1dd6a7f325ca5e8aafa0fe462209b4bb}\label{cub3D_8h_a1dd6a7f325ca5e8aafa0fe462209b4bb}} 
\index{cub3D.h@{cub3D.h}!draw\_map@{draw\_map}}
\index{draw\_map@{draw\_map}!cub3D.h@{cub3D.h}}
\doxysubsubsection{\texorpdfstring{draw\_map()}{draw\_map()}}
{\footnotesize\ttfamily void draw\+\_\+map (\begin{DoxyParamCaption}\item[{struct \mbox{\hyperlink{structs__map__data}{s\+\_\+map\+\_\+data}} $\ast$}]{data }\end{DoxyParamCaption})}



Definition at line \mbox{\hyperlink{draw__map_8c_source_l00012}{12}} of file \mbox{\hyperlink{draw__map_8c_source}{draw\+\_\+map.\+c}}.


\begin{DoxyCode}{0}
\DoxyCodeLine{00013\ \{}
\DoxyCodeLine{00014\ \ \ \ \ mlx\_image\_t*\ image;}
\DoxyCodeLine{00015\ \ \ \ \ mlx\_t*\ mlx;}
\DoxyCodeLine{00016\ }
\DoxyCodeLine{00017\ }
\DoxyCodeLine{00018\ \ \ \ \ \textcolor{comment}{//\ Gotta\ error\ check\ this\ stuff}}
\DoxyCodeLine{00019\ \ \ \ \ \textcolor{keywordflow}{if}\ (!(mlx\ =\ mlx\_init(data-\/>\mbox{\hyperlink{structs__map__data_a6c935e0fd9d156d75d36287be039e256}{width}},\ data-\/>\mbox{\hyperlink{structs__map__data_a3dc97c8f3b6eaa17bf4e5fe4467d9b98}{height}},\ \textcolor{stringliteral}{"{}MLX42"{}},\ \textcolor{keyword}{true})))}
\DoxyCodeLine{00020\ \ \ \ \ \{}
\DoxyCodeLine{00021\ \ \ \ \ \ \ \ \ puts(mlx\_strerror(mlx\_errno));}
\DoxyCodeLine{00022\ \ \ \ \ \}}
\DoxyCodeLine{00023\ \ \ \ \ \textcolor{keywordflow}{if}\ (!(image\ =\ mlx\_new\_image(mlx,\ data-\/>\mbox{\hyperlink{structs__map__data_a6c935e0fd9d156d75d36287be039e256}{width}},\ data-\/>\mbox{\hyperlink{structs__map__data_a3dc97c8f3b6eaa17bf4e5fe4467d9b98}{height}})))}
\DoxyCodeLine{00024\ \ \ \ \ \{}
\DoxyCodeLine{00025\ \ \ \ \ \ \ \ \ mlx\_close\_window(mlx);}
\DoxyCodeLine{00026\ \ \ \ \ \ \ \ \ puts(mlx\_strerror(mlx\_errno));}
\DoxyCodeLine{00027\ \ \ \ \ \}}
\DoxyCodeLine{00028\ \ \ \ \ \textcolor{keywordflow}{if}\ (mlx\_image\_to\_window(mlx,\ image,\ 0,\ 0)\ ==\ -\/1)}
\DoxyCodeLine{00029\ \ \ \ \ \{}
\DoxyCodeLine{00030\ \ \ \ \ \ \ \ \ mlx\_close\_window(mlx);}
\DoxyCodeLine{00031\ \ \ \ \ \ \ \ \ puts(mlx\_strerror(mlx\_errno));}
\DoxyCodeLine{00032\ \ \ \ \ \}}
\DoxyCodeLine{00033\ \ \ \ \ memset(image-\/>pixels,\ 255,\ data-\/>\mbox{\hyperlink{structs__map__data_a6c935e0fd9d156d75d36287be039e256}{width}}\ *\ data-\/>\mbox{\hyperlink{structs__map__data_a3dc97c8f3b6eaa17bf4e5fe4467d9b98}{height}}\ *\ 4);}
\DoxyCodeLine{00034\ \ \ \ \ mlx\_loop\_hook(mlx,\ \mbox{\hyperlink{draw__map_8c_a4b7144f73d9e8c25ca55c890584b5c0e}{ft\_hook}},\ mlx);}
\DoxyCodeLine{00035\ \ \ \ \ mlx\_loop(mlx);}
\DoxyCodeLine{00036\ \ \ \ \ mlx\_terminate(mlx);}
\DoxyCodeLine{00037\ \}}

\end{DoxyCode}
Here is the call graph for this function\+:
% FIG 4
\mbox{\Hypertarget{cub3D_8h_a287e1eb420c186ddb3ca11b0d5b6cab4}\label{cub3D_8h_a287e1eb420c186ddb3ca11b0d5b6cab4}} 
\index{cub3D.h@{cub3D.h}!filename\_is\_valid@{filename\_is\_valid}}
\index{filename\_is\_valid@{filename\_is\_valid}!cub3D.h@{cub3D.h}}
\doxysubsubsection{\texorpdfstring{filename\_is\_valid()}{filename\_is\_valid()}}
{\footnotesize\ttfamily int filename\+\_\+is\+\_\+valid (\begin{DoxyParamCaption}\item[{char $\ast$}]{filename }\end{DoxyParamCaption})}



Checks if the given filename is valid and ends with \char`\"{}.\+cub\char`\"{}. 


\begin{DoxyParams}{Parameters}
{\em filename} & The filename to check.\\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
TRUE (1) if the filename is valid, FALSE (0) otherwise. 
\end{DoxyReturn}


Definition at line \mbox{\hyperlink{read__map_8c_source_l00088}{88}} of file \mbox{\hyperlink{read__map_8c_source}{read\+\_\+map.\+c}}.


\begin{DoxyCode}{0}
\DoxyCodeLine{00089\ \{}
\DoxyCodeLine{00090\ \ \ \ \ \textcolor{keywordtype}{int}\ filename\_length;}
\DoxyCodeLine{00091\ }
\DoxyCodeLine{00092\ \ \ \ \ filename\_length\ =\ \mbox{\hyperlink{libft_8h_a828402378653640f545a4be2e00e92f9}{ft\_strlen}}(filename);}
\DoxyCodeLine{00093\ \ \ \ \ \textcolor{keywordflow}{if}\ (\mbox{\hyperlink{libft_8h_a9d2fe792187aa4ed08e5864fb2c4d6dc}{ft\_strncmp}}(filename\ +\ (filename\_length\ -\/\ 4),\ \textcolor{stringliteral}{"{}.cub\(\backslash\)0"{}},\ 5))}
\DoxyCodeLine{00094\ \ \ \ \ \ \ \ \ \mbox{\hyperlink{read__map_8c_af11ad10198633d526882d9ebabf21042}{handle\_error}}(\mbox{\hyperlink{map__utils_8h_a8e0ad1ba0b05ba2af8e7fcd8f02c12ed}{BAD\_MAP\_FILE}});}
\DoxyCodeLine{00095\ \ \ \ \ \textcolor{keywordflow}{return}\ (\mbox{\hyperlink{cub3D_8h_aa8cecfc5c5c054d2875c03e77b7be15d}{TRUE}});}
\DoxyCodeLine{00096\ \}}

\end{DoxyCode}
Here is the call graph for this function\+:
% FIG 5
Here is the caller graph for this function\+:
% FIG 6
\mbox{\Hypertarget{cub3D_8h_a3efc0a465ac3693c6748963564a7dc0e}\label{cub3D_8h_a3efc0a465ac3693c6748963564a7dc0e}} 
\index{cub3D.h@{cub3D.h}!init\_map\_data@{init\_map\_data}}
\index{init\_map\_data@{init\_map\_data}!cub3D.h@{cub3D.h}}
\doxysubsubsection{\texorpdfstring{init\_map\_data()}{init\_map\_data()}}
{\footnotesize\ttfamily void init\+\_\+map\+\_\+data (\begin{DoxyParamCaption}\item[{struct \mbox{\hyperlink{structs__map__data}{s\+\_\+map\+\_\+data}} $\ast$$\ast$}]{data,  }\item[{char $\ast$}]{map\+\_\+file }\end{DoxyParamCaption})}



Initializes map data. 

This function initializes a map\+\_\+data struct and sets its map\+\_\+string, width, and height values.


\begin{DoxyParams}{Parameters}
{\em data} & A pointer to the map\+\_\+data struct to be initialized. \\
\hline
{\em map\+\_\+file} & The file path of the map file to be read. \\
\hline
\end{DoxyParams}


Definition at line \mbox{\hyperlink{draw__map__utils_8c_source_l00024}{24}} of file \mbox{\hyperlink{draw__map__utils_8c_source}{draw\+\_\+map\+\_\+utils.\+c}}.


\begin{DoxyCode}{0}
\DoxyCodeLine{00025\ \{}
\DoxyCodeLine{00026\ \ \ \ \ \textcolor{keywordtype}{char}\ \ \ \ *map;}
\DoxyCodeLine{00027\ }
\DoxyCodeLine{00028\ \ \ \ \ map\ =\ \mbox{\hyperlink{map__utils_8h_a4262bf4509b96716171e25f0f9f0644e}{read\_map}}(map\_file);}
\DoxyCodeLine{00029\ \ \ \ \ (*data)\ =\ malloc(\textcolor{keyword}{sizeof}(\textcolor{keyword}{struct}\ \mbox{\hyperlink{structs__map__data}{s\_map\_data}}));}
\DoxyCodeLine{00030\ \ \ \ \ \textcolor{keywordflow}{if}\ (!(*data))}
\DoxyCodeLine{00031\ \ \ \ \ \ \ \ \ \mbox{\hyperlink{map__utils_8h_af11ad10198633d526882d9ebabf21042}{handle\_error}}(errno);}
\DoxyCodeLine{00032\ \ \ \ \ (*data)-\/>map\_string\ =\ map;}
\DoxyCodeLine{00033\ \ \ \ \ \textcolor{keywordflow}{if}\ ((*data)-\/>map\_string\ ==\ NULL)}
\DoxyCodeLine{00034\ \ \ \ \ \ \ \ \ \mbox{\hyperlink{map__utils_8h_aabc8b9c956e025066b300e71e80f2590}{cleanup\_and\_exit}}(errno,\ 0,\ NULL);}
\DoxyCodeLine{00035\ \ \ \ \ \textcolor{keywordflow}{if}\ ((*data)-\/>map\_string)}
\DoxyCodeLine{00036\ \ \ \ \ \{}
\DoxyCodeLine{00037\ \ \ \ \ \ \ \ \ (*data)-\/>map\ =\ \mbox{\hyperlink{libft_8h_aa65c9de65051c8c589286cf133c4a1f4}{ft\_split}}((*data)-\/>map\_string,\ \textcolor{charliteral}{'\(\backslash\)n'});}
\DoxyCodeLine{00038\ \ \ \ \ \ \ \ \ (*data)-\/>width\ =\ \mbox{\hyperlink{libft_8h_a828402378653640f545a4be2e00e92f9}{ft\_strlen}}((*data)-\/>map[0])\ *\ 32;}
\DoxyCodeLine{00039\ \ \ \ \ \ \ \ \ (*data)-\/>height\ =\ \mbox{\hyperlink{draw__map__utils_8c_ad624da07f82233cb9bf10960641f9fec}{get\_height}}((*data)-\/>map)\ *\ 32;}
\DoxyCodeLine{00040\ \ \ \ \ \}}
\DoxyCodeLine{00041\ \}}

\end{DoxyCode}
Here is the call graph for this function\+:
% FIG 7
Here is the caller graph for this function\+:
% FIG 8
